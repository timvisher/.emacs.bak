This is ../info/efaq, produced by makeinfo version 4.11 from faq.texi.

Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008 Free
Software Foundation, Inc.
Copyright 1994,1995,1996,1997,1998,1999,2000 Reuven M. Lerner
Copyright 1992,1993 Steven Byrnes
Copyright 1990,1991,1992 Joseph Brian Wells
     This list of frequently asked questions about GNU Emacs with
     answers ("FAQ") may be translated into other languages,
     transformed into other formats (e.g. Texinfo, Info, WWW, WAIS),
     and updated with new information.

     The same conditions apply to any derivative of the FAQ as apply to
     the FAQ itself.  Every copy of the FAQ must include this notice or
     an approved translation, information on who is currently
     maintaining the FAQ and how to contact them (including their
     e-mail address), and information on where the latest version of
     the FAQ is archived (including FTP information).

     The FAQ may be copied and redistributed under these conditions,
     except that the FAQ may not be embedded in a larger literary work
     unless that work itself allows free copying and redistribution.

     [This version has been heavily edited since it was included in the
     Emacs distribution.]

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Emacs FAQ: (efaq).	Frequently Asked Questions about Emacs.
END-INFO-DIR-ENTRY


File: efaq,  Node: Top,  Next: FAQ notation,  Prev: (dir),  Up: (dir)

   This is the GNU Emacs FAQ, last updated on 26 August 2008.

   This FAQ is maintained as a part of GNU Emacs.  If you find any
errors, or have any suggestions, please use `M-x report-emacs-bug' to
report them.

* Menu:

* FAQ notation::
* General questions::
* Getting help::
* Status of Emacs::
* Common requests::
* Bugs and problems::
* Compiling and installing Emacs::
* Finding Emacs and related packages::
* Major packages and programs::
* Key bindings::
* Alternate character sets::
* Mail and news::
* Concept index::


File: efaq,  Node: FAQ notation,  Next: General questions,  Prev: Top,  Up: Top

1 FAQ notation
**************

This chapter describes notation used in the GNU Emacs FAQ, as well as in
the Emacs documentation.  Consult this section if this is the first time
you are reading the FAQ, or if you are confused by notation or terms
used in the FAQ.

* Menu:

* Basic keys::
* Extended commands::
* On-line manual::
* File-name conventions::
* Common acronyms::


File: efaq,  Node: Basic keys,  Next: Extended commands,  Prev: FAQ notation,  Up: FAQ notation

1.1 What do these mean: `C-h', `C-M-a', <RET>, `<ESC> a', etc.?
===============================================================

   * `C-x': press the <x> key while holding down the <Control> key

   * `M-x': press the <x> key while holding down the <Meta> key (if
     your computer doesn't have a <Meta> key, *note No Meta key::)

   * `M-C-x': press the <x> key while holding down both <Control> and
     <Meta>

   * `C-M-x': a synonym for the above

   * <LFD>: Linefeed or Newline; same as `C-j'

   * <RET>: <Return>, sometimes marked <Enter>; same as `C-m'

   * <DEL>: <Delete>, usually *not* the same as <Backspace>; same as
     `C-?' (see *note Backspace invokes help::, if deleting invokes
     Emacs help)

   * <ESC>: Escape; same as `C-['

   * <TAB>: Tab; same as `C-i'

   * <SPC>: Space bar


   Key sequences longer than one key (and some single-key sequences) are
written inside quotes or on lines by themselves, like this:

       `M-x frobnicate-while-foo RET'

Any real spaces in such a key sequence should be ignored; only <SPC>
really means press the space key.

   The ASCII code sent by `C-x' (except for `C-?') is the value that
would be sent by pressing just <x> minus 96 (or 64 for upper-case <X>)
and will be from 0 to 31.  On Unix and GNU/Linux terminals, the ASCII
code sent by `M-x' is the sum of 128 and the ASCII code that would be
sent by pressing just <x>.  Essentially, <Control> turns off bits 5 and
6 and <Meta> turns on bit 7(1).

   `C-?' (aka <DEL>) is ASCII code 127.  It is a misnomer to call `C-?'
a "control" key, since 127 has both bits 5 and 6 turned ON.  Also, on
very few keyboards does `C-?' generate ASCII code 127.

   *note Text Characters: (emacs)Text Characters, and *note Keys:
(emacs)Keys, for more information.  (*Note On-line manual::, for more
information about Info.)

   ---------- Footnotes ----------

   (1) DOS and Windows terminals don't set bit 7 when the <Meta> key is
pressed.


File: efaq,  Node: Extended commands,  Next: On-line manual,  Prev: Basic keys,  Up: FAQ notation

1.2 What does `M-x COMMAND' mean?
=================================

`M-x COMMAND' means type `M-x', then type the name of the command, then
type <RET>.  (*Note Basic keys::, if you're not sure what `M-x' and
<RET> mean.)

   `M-x' (by default) invokes the command `execute-extended-command'.
This command allows you to run any Emacs command if you can remember
the command's name.  If you can't remember the command's name, you can
type <TAB> and <SPC> for completion, <?> for a list of possibilities,
and `M-p' and `M-n' (or up-arrow and down-arrow on terminals that have
these editing keys) to see previous commands entered.  An Emacs
"command" is an "interactive" Emacs function.

   Your system administrator may have bound other key sequences to
invoke `execute-extended-command'.  A function key labeled `Do' is a
good candidate for this, on keyboards that have such a key.

   If you need to run non-interactive Emacs functions, see *note
Evaluating Emacs Lisp code::.


File: efaq,  Node: On-line manual,  Next: File-name conventions,  Prev: Extended commands,  Up: FAQ notation

1.3 How do I read topic XXX in the on-line manual?
==================================================

When we refer you to some TOPIC in the on-line manual, you can read
this manual node inside Emacs (assuming nothing is broken) by typing
`C-h i m emacs <RET> m TOPIC <RET>'.

   This invokes Info, the GNU hypertext documentation browser.  If you
don't already know how to use Info, type <?> from within Info.

   If we refer to TOPIC:SUBTOPIC, type `C-h i m emacs <RET> m TOPIC
<RET> m SUBTOPIC <RET>'.

   If these commands don't work as expected, your system administrator
may not have installed the Info files, or may have installed them
improperly.  In this case you should complain.

   *Note Getting a printed manual::, if you would like a paper copy of
the Emacs manual.


File: efaq,  Node: File-name conventions,  Next: Common acronyms,  Prev: On-line manual,  Up: FAQ notation

1.4 What are `etc/SERVICE', `src/config.h', and `lisp/default.el'?
==================================================================

These are files that come with Emacs.  The Emacs distribution is divided
into subdirectories; the important ones are `etc', `lisp', and `src'.

   If you use Emacs, but don't know where it is kept on your system,
start Emacs, then type `C-h v data-directory <RET>'.  The directory
name displayed by this will be the full pathname of the installed `etc'
directory.  (This full path is recorded in the Emacs variable
`data-directory', and `C-h v' displays the value and the documentation
of a variable.)

   The location of your Info directory (i.e., where on-line
documentation is stored) is kept in the variable
`Info-default-directory-list'.  Use `C-h v Info-default-directory-list
<RET>' to see the value of this variable, which will be a list of
directory names.  The last directory in that list is probably where
most Info files are stored.  By default, Info documentation is placed
in `/usr/local/info'.

   Some of these files are available individually via FTP or e-mail; see
*note Informational files for Emacs::.  They all are available in the
source distribution.  Many of the files in the `etc' directory are also
available via the Emacs `Help' menu, or by typing `C-h ?' (`M-x
help-for-help').

   Your system administrator may have removed the `src' directory and
many files from the `etc' directory.


File: efaq,  Node: Common acronyms,  Prev: File-name conventions,  Up: FAQ notation

1.5 What are FSF, LPF, OSF, GNU, RMS, FTP, and GPL?
===================================================

FSF
     Free Software Foundation

LPF
     League for Programming Freedom

OSF
     Open Software Foundation

GNU
     GNU's Not Unix

RMS
     Richard Matthew Stallman

FTP
     File Transfer Protocol

GPL
     GNU General Public License


   Avoid confusing the FSF, the LPF, and the OSF.  The LPF opposes
look-and-feel copyrights and software patents.  The FSF aims to make
high quality free software available for everyone.  The OSF is a
consortium of computer vendors which develops commercial software for
Unix systems.

   The word "free" in the title of the Free Software Foundation refers
to "freedom," not "zero cost."  Anyone can charge any price for
GPL-covered software that they want to.  However, in practice, the
freedom enforced by the GPL leads to low prices, because you can always
get the software for less money from someone else, since everyone has
the right to resell or give away GPL-covered software.


File: efaq,  Node: General questions,  Next: Getting help,  Prev: FAQ notation,  Up: Top

2 General questions
*******************

This chapter contains general questions having to do with Emacs, the
Free Software Foundation, and related organizations.

* Menu:

* The LPF::
* Real meaning of copyleft::
* Guidelines for newsgroup postings::
* Newsgroup archives::
* Reporting bugs::
* Unsubscribing from Emacs lists::
* Contacting the FSF::


File: efaq,  Node: The LPF,  Next: Real meaning of copyleft,  Prev: General questions,  Up: General questions

2.1 What is the LPF?
====================

The LPF opposes the expanding danger of software patents and
look-and-feel copyrights.  To get more information, feel free to contact
the LPF via e-mail or otherwise.  You may also contact Joe Wells
<jbw@cs.bu.edu>; he will be happy to talk to you about the LPF.

   You can find more information about the LPF in the file `etc/LPF'.
More papers describing the LPF's views are available on the Internet and
also from the LPF home page (http://lpf.ai.mit.edu/).


File: efaq,  Node: Real meaning of copyleft,  Next: Guidelines for newsgroup postings,  Prev: The LPF,  Up: General questions

2.2 What is the real legal meaning of the GNU copyleft?
=======================================================

The real legal meaning of the GNU General Public License (copyleft) will
only be known if and when a judge rules on its validity and scope.
There has never been a copyright infringement case involving the GPL to
set any precedents.  Please take any discussion regarding this issue to
the newsgroup `news:gnu.misc.discuss', which was created to hold the
extensive flame wars on the subject.

   RMS writes:

     The legal meaning of the GNU copyleft is less important than the
     spirit, which is that Emacs is a free software project and that
     work pertaining to Emacs should also be free software.  "Free"
     means that all users have the freedom to study, share, change and
     improve Emacs.  To make sure everyone has this freedom, pass along
     source code when you distribute any version of Emacs or a related
     program, and give the recipients the same freedom that you enjoyed.


File: efaq,  Node: Guidelines for newsgroup postings,  Next: Newsgroup archives,  Prev: Real meaning of copyleft,  Up: General questions

2.3 What are appropriate messages for `news:gnu.emacs.help', `news:gnu.emacs.bug', `news:comp.emacs', etc.?
===========================================================================================================

The file `etc/MAILINGLISTS' describes the purpose of each GNU mailing
list.  (*Note Informational files for Emacs::, if you want a copy of
the file.)  For those lists which are gatewayed with newsgroups, it
lists both the newsgroup name and the mailing list address.

   The newsgroup `news:comp.emacs' is for discussion of Emacs programs
in general.  This includes Emacs along with various other
implementations, such as XEmacs, JOVE, MicroEmacs, Freemacs, MG,
Unipress, CCA, and Epsilon.

   Many people post Emacs questions to `news:comp.emacs' because they
don't receive any of the `gnu.*' newsgroups.  Arguments have been made
both for and against posting GNU-Emacs-specific material to
`news:comp.emacs'.  You have to decide for yourself.

   Messages advocating "non-free" software are considered unacceptable
on any of the `gnu.*' newsgroups except for `news:gnu.misc.discuss',
which was created to hold the extensive flame-wars on the subject.
"Non-free" software includes any software for which the end user can't
freely modify the source code and exchange enhancements.  Be careful to
remove the `gnu.*' groups from the `Newsgroups:' line when posting a
followup that recommends such software.

   `news:gnu.emacs.bug' is a place where bug reports appear, but avoid
posting bug reports to this newsgroup directly (*note Reporting bugs::).


File: efaq,  Node: Newsgroup archives,  Next: Reporting bugs,  Prev: Guidelines for newsgroup postings,  Up: General questions

2.4 Where can I get old postings to `news:gnu.emacs.help' and other GNU groups?
===============================================================================

The FSF has maintained archives of all of the GNU mailing lists for many
years, although there may be some unintentional gaps in coverage.  The
archive is not particularly well organized or easy to retrieve
individual postings from, but pretty much everything is there.

   The archive is at `ftp://lists.gnu.org/'.

   The archive can be browsed over the web at the GNU mail archive
(http://lists.gnu.org/archive/html/).

   Web-based Usenet search services, such as Google
(http://groups.google.com/groups/dir?sel=33592484), also archive the
`gnu.*' groups.

   You can read the archives of the `gnu.*' groups and post new
messages at Gmane (http://gmane.org/).


File: efaq,  Node: Reporting bugs,  Next: Unsubscribing from Emacs lists,  Prev: Newsgroup archives,  Up: General questions

2.5 Where should I report bugs and other problems with Emacs?
=============================================================

The correct way to report Emacs bugs is to use the command `M-x
report-emacs-bug'.  It sets up a mail buffer with the essential
information and the correct e-mail address which is
<bug-gnu-emacs@gnu.org> for the released versions of Emacs.  Anything
sent to <bug-gnu-emacs@gnu.org> also appears in the newsgroup
`news:gnu.emacs.bug', but please use e-mail instead of news to submit
the bug report.  This ensures a reliable return address so you can be
contacted for further details.

   Be sure to read the "Bugs" section of the Emacs manual before
reporting a bug!  The manual describes in detail how to submit a useful
bug report (*note Reporting Bugs: (emacs)Bugs.).  (*Note On-line
manual::, if you don't know how to read the manual.)

   RMS says:

     Sending bug reports to <help-gnu-emacs@gnu.org> (which has the
     effect of posting on `news:gnu.emacs.help') is undesirable because
     it takes the time of an unnecessarily large group of people, most
     of whom are just users and have no idea how to fix these problem.
     <bug-gnu-emacs@gnu.org> reaches a much smaller group of people who
     are more likely to know what to do and have expressed a wish to
     receive more messages about Emacs than the others.

   RMS says it is sometimes fine to post to `news:gnu.emacs.help':

     If you have reported a bug and you don't hear about a possible fix,
     then after a suitable delay (such as a week) it is okay to post on
     `gnu.emacs.help' asking if anyone can help you.

   If you are unsure whether you have found a bug, consider the
following non-exhaustive list, courtesy of RMS:

     If Emacs crashes, that is a bug.  If Emacs gets compilation errors
     while building, that is a bug.  If Emacs crashes while building,
     that is a bug.  If Lisp code does not do what the documentation
     says it does, that is a bug.


File: efaq,  Node: Unsubscribing from Emacs lists,  Next: Contacting the FSF,  Prev: Reporting bugs,  Up: General questions

2.6 How do I unsubscribe from this mailing list?
================================================

If you are receiving a GNU mailing list named LIST, you might be able
to unsubscribe from it by sending a request to the address
<LIST-request@gnu.org>.  However, this will not work if you are not
listed on the main mailing list, but instead receive the mail from a
distribution point.  In that case, you will have to track down at which
distribution point you are listed.  Inspecting the `Received' headers
on the mail messages may help, along with liberal use of the `EXPN' or
`VRFY' sendmail commands through `telnet SITE-ADDRESS smtp'.  Ask your
postmaster for help, if you cannot figure out these details.


File: efaq,  Node: Contacting the FSF,  Prev: Unsubscribing from Emacs lists,  Up: General questions

2.7 What is the current address of the FSF?
===========================================

E-mail
     gnu@gnu.org

Telephone
     +1-617-542-5942

Fax
     +1-617-542-2652

World Wide Web
     `http://www.gnu.org/'

Postal address
     Free Software Foundation
     51 Franklin Street, Fifth Floor
     Boston, MA 02110-1301
     USA

   For details on how to order items directly from the FSF, see the GNU
Web site (http://www.gnu.org/order/order.html).


File: efaq,  Node: Getting help,  Next: Status of Emacs,  Prev: General questions,  Up: Top

3 Getting help
**************

This chapter tells you how to get help with Emacs

* Menu:

* Basic editing::
* Learning how to do something::
* Getting a printed manual::
* Emacs Lisp documentation::
* Installing Texinfo documentation::
* Printing a Texinfo file::
* Viewing Info files outside of Emacs::
* Informational files for Emacs::
* Help installing Emacs::
* Obtaining the FAQ::


File: efaq,  Node: Basic editing,  Next: Learning how to do something,  Prev: Getting help,  Up: Getting help

3.1 I'm just starting Emacs; how do I do basic editing?
=======================================================

Type `C-h t' to invoke the self-paced tutorial.  Just typing `C-h'
enters the help system.  Starting with Emacs 22, the tutorial is
available in many foreign languages such as French, German, Japanese,
Russian, etc.  Use `M-x help-with-tutorial-spec-language <RET>' to
choose your language and start the tutorial.

   Your system administrator may have changed `C-h' to act like <DEL>
to deal with local keyboards.  You can use `M-x help-for-help' instead
to invoke help.  To discover what key (if any) invokes help on your
system, type `M-x where-is <RET> help-for-help <RET>'.  This will print
a comma-separated list of key sequences in the echo area.  Ignore the
last character in each key sequence listed.  Each of the resulting key
sequences invokes help.

   Emacs help works best if it is invoked by a single key whose value
should be stored in the variable `help-char'.


File: efaq,  Node: Learning how to do something,  Next: Getting a printed manual,  Prev: Basic editing,  Up: Getting help

3.2 How do I find out how to do something in Emacs?
===================================================

There are several methods for finding out how to do things in Emacs.

   * The complete text of the Emacs manual is available on-line via the
     Info hypertext reader.  Type `C-h r' to display the manual in Info
     mode.  Typing <h> immediately after entering Info will provide a
     short tutorial on how to use it.

   * To quickly locate the section of the manual which discusses a
     certain issue, or describes a command or a variable, type `C-h i m
     emacs <RET> i TOPIC <RET>', where TOPIC is the name of the topic,
     the command, or the variable which you are looking for.  If this
     does not land you on the right place in the manual, press `,'
     (comma) repeatedly until you find what you need.  (The `i' and `,'
     keys invoke the index-searching functions, which look for the
     TOPIC you type in all the indices of the Emacs manual.)

   * You can list all of the commands whose names contain a certain word
     (actually which match a regular expression) using `C-h a' (`M-x
     command-apropos').

   * The command `C-h F' (`Info-goto-emacs-command-node') prompts for
     the name of a command, and then attempts to find the section in the
     Emacs manual where that command is described.

   * You can list all of the functions and variables whose names
     contain a certain word using `M-x apropos'.

   * You can list all of the functions and variables whose documentation
     matches a regular expression or a string, using `M-x
     apropos-documentation'.

   * You can order a hardcopy of the manual from the FSF.  *Note
     Getting a printed manual::.

   * You can get a printed reference card listing commands and keys to
     invoke them.  You can order one from the FSF for $1 (or 10 for $5),
     or you can print your own from the `etc/refcard.tex' or
     `etc/refcard.ps' files in the Emacs distribution.  Beginning with
     version 21.1, the Emacs distribution comes with translations of the
     reference card into several languages; look for files named
     `etc/LANG-refcard.*', where LANG is a two-letter code of the
     language.  For example, the German version of the reference card
     is in the files `etc/de-refcard.tex' and `etc/de-refcard.ps'.

   * There are many other commands in Emacs for getting help and
     information.  To get a list of these commands, type `?' after
     `C-h'.



File: efaq,  Node: Getting a printed manual,  Next: Emacs Lisp documentation,  Prev: Learning how to do something,  Up: Getting help

3.3 How do I get a printed copy of the Emacs manual?
====================================================

You can order a printed copy of the Emacs manual from the FSF.  For
details see the GNU Web site (http://www.gnu.org/order/order.html).

   The full Texinfo source for the manual also comes in the `man'
directory of the Emacs distribution, if you're daring enough to try to
print out this 620-page manual yourself (*note Printing a Texinfo
file::).

   If you absolutely have to print your own copy, and you don't have
TeX, you can get a PostScript version from

   `http://www.gnu.org/software/emacs/manual/emacs.ps.gz'

   An HTML version of the manual is at

   `http://www.gnu.org/software/emacs/manual/emacs.html'

   The manual is available in other formats at

   `http://www.gnu.org/software/emacs/manual/'

   *Note Learning how to do something::, for how to view the manual
on-line.


File: efaq,  Node: Emacs Lisp documentation,  Next: Installing Texinfo documentation,  Prev: Getting a printed manual,  Up: Getting help

3.4 Where can I get documentation on Emacs Lisp?
================================================

Within Emacs, you can type `C-h f' to get the documentation for a
function, `C-h v' for a variable.

   For more information, the Emacs Lisp Reference Manual is available
on-line, in Info format.  *Note Emacs Lisp: (elisp)Top.

   You can also order a hardcopy of the manual, details on ordering it
from FSF are on the GNU Web site (http://www.gnu.org/order/order.html).

   An HTML version of the Emacs Lisp Reference Manual is available at

   `http://www.gnu.org/software/emacs/elisp-manual/elisp.html'


File: efaq,  Node: Installing Texinfo documentation,  Next: Printing a Texinfo file,  Prev: Emacs Lisp documentation,  Up: Getting help

3.5 How do I install a piece of Texinfo documentation?
======================================================

First, you must turn the Texinfo files into Info files.  You may do this
using the stand-alone `makeinfo' program, available as part of the
latest Texinfo package at

   `ftp://ftp.gnu.org/pub/gnu/texinfo/texinfo-4.8.tar.gz'

   and all mirrors of `ftp.gnu.org' (for a list, *note Current GNU
distributions::).

   For information about the Texinfo format, read the Texinfo manual
which comes with the Texinfo package.  This manual also comes installed
in Info format, so you can read it on-line; type `C-h i m texinfo
<RET>'.

   Alternatively, you could use the Emacs command `M-x
texinfo-format-buffer', after visiting the Texinfo source file of the
manual you want to convert.

   Neither `texinfo-format-buffer' nor `makeinfo' installs the
resulting Info files in Emacs's Info tree.  To install Info files,
perform these steps:

  1. Move the files to the `info' directory in the installed Emacs
     distribution.  *Note File-name conventions::, if you don't know
     where that is.

  2. Run the `install-info' command, which is part of the Texinfo
     distribution, to update the main Info directory menu, like this:

           install-info --info-dir=DIR-PATH DIR-PATH/FILE

     where DIR-PATH is the full path to the directory where you copied
     the produced Info file(s), and FILE is the name of the Info file
     you produced and want to install.

     If you don't have the `install-info' command installed, you can
     edit the file `info/dir' in the installed Emacs distribution, and
     add a line for the top level node in the Info package that you are
     installing.  Follow the examples already in this file.  The format
     is:

          * Topic: (relative-pathname).  Short description of topic.


   If you want to install Info files and you don't have the necessary
privileges, you have several options:

   * Info files don't actually need to be installed before being used.
     You can use a prefix argument for the `info' command and specify
     the name of the Info file in the minibuffer.  This goes to the node
     named `Top' in that file.  For example, to view a Info file named
     `INFO-FILE' in your home directory, you can type this:

          C-u C-h i ~/INFO-FILE <RET>

     Alternatively, you can feed a file name to the `Info-goto-node'
     command (invoked by pressing <g> in Info mode) by typing the name
     of the file in parentheses, like this:

          C-h i g (~/INFO-FILE) <RET>

   * You can create your own Info directory.  You can tell Emacs where
     that Info directory is by adding its pathname to the value of the
     variable `Info-default-directory-list'.  For example, to use a
     private Info directory which is a subdirectory of your home
     directory named `Info', you could put this in your `.emacs' file:

          (setq Info-default-directory-list
                (cons "~/Info" Info-default-directory-list))

     You will need a top-level Info file named `dir' in this directory
     which has everything the system `dir' file has in it, except it
     should list only entries for Info files in that directory.  You
     might not need it if all files in this directory were referenced
     by other `dir' files.  The node lists from all `dir' files in
     `Info-default-directory-list' are merged by the Info system.



File: efaq,  Node: Printing a Texinfo file,  Next: Viewing Info files outside of Emacs,  Prev: Installing Texinfo documentation,  Up: Getting help

3.6 How do I print a Texinfo file?
==================================

You can't get nicely printed output from Info files; you must still have
the original Texinfo source file for the manual you want to print.

   Assuming you have TeX installed on your system, follow these steps:

  1. Make sure the first line of the Texinfo file looks like this:

          \input texinfo

     You may need to change `texinfo' to the full pathname of the
     `texinfo.tex' file, which comes with Emacs as `man/texinfo.tex'
     (or copy or link it into the current directory).

  2. Type `texi2dvi TEXINFO-SOURCE', where TEXINFO-SOURCE is the name
     of the Texinfo source file for which you want to produce a printed
     copy.

     The `texi2dvi' script is part of the GNU Texinfo distribution
     (*note Installing Texinfo documentation::).

  3. Print the DVI file `TEXINFO-SOURCE.dvi' in the normal way for
     printing DVI files at your site.  For example, if you have a
     PostScript printer, run the `dvips' program to print the DVI file
     on that printer.


   To get more general instructions, retrieve the latest Texinfo package
(*note Installing Texinfo documentation::).


File: efaq,  Node: Viewing Info files outside of Emacs,  Next: Informational files for Emacs,  Prev: Printing a Texinfo file,  Up: Getting help

3.7 Can I view Info files without using Emacs?
==============================================

Yes.  Here are some alternative programs:

   * `info', a stand-alone version of the Info program, comes as part of
     the Texinfo package.  *Note Installing Texinfo documentation::, for
     details.

   * Xinfo, a stand-alone version of the Info program that runs under X
     Window system.  You can get it at
     `ftp://ftp.gnu.org/pub/gnu/xinfo/xinfo-1.01.01.tar.gz' and all
     mirrors of `ftp.gnu.org' (see *note Current GNU distributions::,
     for a list of mirrors).

   * Tkinfo, an Info viewer that runs under X Window system and uses
     Tcl/Tk.  You can get Tkinfo at
     `http://math-www.uni-paderborn.de/~axel/tkinfo/'.



File: efaq,  Node: Informational files for Emacs,  Next: Help installing Emacs,  Prev: Viewing Info files outside of Emacs,  Up: Getting help

3.8 What informational files are available for Emacs?
=====================================================

This isn't a frequently asked question, but it should be!  A variety of
informational files about Emacs and relevant aspects of the GNU project
are available for you to read.

   The following files are available in the `etc' directory of the
Emacs distribution (see *note File-name conventions::, if you're not
sure where that is).

`COPYING'
     GNU General Public License

`DISTRIB'
     Emacs Availability Information, including the popular Free Software
     Foundation Order Form

`FTP'
     How to get GNU Software by Internet FTP or by UUCP

`GNU'
     The GNU Manifesto

`INTERVIEW'
     Richard Stallman discusses his public-domain UNIX-compatible
     software system with BYTE editors

`LPF'
     Why you should join the League for Programming Freedom

`MACHINES'
     Status of Emacs on Various Machines and Systems

`MAILINGLISTS'
     GNU Project Electronic Mailing Lists

`NEWS'
     Emacs news, a history of recent user-visible changes

`SERVICE'
     GNU Service Directory

`SUN-SUPPORT'
     including "Using Emacstool with GNU Emacs"


   More GNU information, including back issues of the `GNU's Bulletin',
are at

   `http://www.gnu.org/bulletins/bulletins.html' and

   `http://www.cs.pdx.edu/~trent/gnu/gnu.html'


File: efaq,  Node: Help installing Emacs,  Next: Obtaining the FAQ,  Prev: Informational files for Emacs,  Up: Getting help

3.9 Where can I get help in installing Emacs?
=============================================

*Note Installing Emacs::, for some basic installation hints, and see
*note Problems building Emacs::, or *note Linking with -lX11 fails::,
if you have problems with the installation.

   The file `etc/SERVICE' (see *note File-name conventions::, if you're
not sure where that is) lists companies and individuals willing to sell
you help in installing or using Emacs.  An up-to-date version this file
is available on `ftp.gnu.org' (*note Informational files for Emacs::).


File: efaq,  Node: Obtaining the FAQ,  Prev: Help installing Emacs,  Up: Getting help

3.10 Where can I get the latest version of this FAQ?
====================================================

The Emacs FAQ is available in several ways:

   * Inside of Emacs itself.  You can get it from selecting the `Emacs
     FAQ' option from the `Help' menu of the Emacs menu bar at the top
     of any Emacs frame, or by typing `C-h C-f' (`M-x view-emacs-FAQ').

   * Via USENET.  If you can read news, the FAQ should be available in
     your news spool, in both the `news:gnu.emacs.help' and
     `news:comp.emacs' newsgroups.  Every news reader should allow you
     to read any news article that is still in the news spool, even if
     you have read the article before.  You may need to read the
     instructions for your news reader to discover how to do this.  In
     `rn', this command will do this for you at the article selection
     level:

          ?GNU Emacs Frequently Asked Questions?rc:m

     In Gnus, you should type `C-u C-x C-s' from the `*Summary*' buffer
     or `C-u <SPC>' from the `*Newsgroup*' buffer to view all articles
     in a newsgroup.

     If the FAQ articles have expired and have been deleted from your
     news spool, it might (or might not) do some good to complain to
     your news administrator, because the most recent FAQ should not
     expire for a while.

   * In the Emacs distribution.  Since Emacs 18.56, the FAQ at the time
     of release has been part of the Emacs distribution as either
     `etc/FAQ' or `man/faq.texi' (*note File-name conventions::).

   * Via anonymous ftp and e-mail from `rtfm.mit.edu' (and its mirror in
     Europe), the main repository for FAQs and other items posted to
     news.answers.  The Emacs FAQs are available at

     `ftp://rtfm.mit.edu/pub/usenet/comp.emacs/' and

     `ftp://ftp.uni-paderborn.de/pub/doc/FAQ/comp/emacs/'

     If you do not have access to anonymous FTP, you can access the
     archives using the `rtfm.mit.edu' mail server.  The Emacs FAQ can
     be retrieved by sending mail to <mail-server@rtfm.mit.edu> with a
     blank subject and containing

          send usenet/news.answers/GNU-Emacs-FAQ/diffs
          send usenet/news.answers/GNU-Emacs-FAQ/part1
          send usenet/news.answers/GNU-Emacs-FAQ/part2
          send usenet/news.answers/GNU-Emacs-FAQ/part3
          send usenet/news.answers/GNU-Emacs-FAQ/part4
          send usenet/news.answers/GNU-Emacs-FAQ/part5

     For more information, send email to <mail-server@rtfm.mit.edu>
     with `help' and `index' in the body on separate lines.


File: efaq,  Node: Status of Emacs,  Next: Common requests,  Prev: Getting help,  Up: Top

4 Status of Emacs
*****************

This chapter gives you basic information about Emacs, including its
latest version status.

* Menu:

* Origin of the term Emacs::
* Latest version of Emacs::
* New in Emacs 20::
* New in Emacs 21::
* New in Emacs 22::


File: efaq,  Node: Origin of the term Emacs,  Next: Latest version of Emacs,  Prev: Status of Emacs,  Up: Status of Emacs

4.1 Where does the name "Emacs" come from?
==========================================

Emacs originally was an acronym for Editor MACroS.  RMS says he "picked
the name Emacs because <E> was not in use as an abbreviation on ITS at
the time."  The first Emacs was a set of macros written in 1976 at MIT
by RMS for the editor TECO (Text Editor and COrrector, originally Tape
Editor and COrrector) under ITS on a PDP-10.  RMS had already extended
TECO with a "real-time" full-screen mode with reprogrammable keys.
Emacs was started by Guy Steele <gls@east.sun.com> as a project to
unify the many divergent TECO command sets and key bindings at MIT, and
completed by RMS.

   Many people have said that TECO code looks a lot like line noise; you
can read more at `news:alt.lang.teco'.  Someone has written a TECO
implementation in Emacs Lisp (to find it, see *note Packages that do
not come with Emacs::); it would be an interesting project to run the
original TECO Emacs inside of Emacs.

   For some not-so-serious alternative reasons for Emacs to have that
name, check out the file `etc/JOKES' (*note File-name conventions::).


File: efaq,  Node: Latest version of Emacs,  Next: New in Emacs 20,  Prev: Origin of the term Emacs,  Up: Status of Emacs

4.2 What is the latest version of Emacs?
========================================

Emacs 22.1 is the current version as of this writing.


File: efaq,  Node: New in Emacs 20,  Next: New in Emacs 21,  Prev: Latest version of Emacs,  Up: Status of Emacs

4.3 What is different about Emacs 20?
=====================================

To find out what has changed in recent versions, type `C-h C-n' (`M-x
view-emacs-news').  The oldest changes are at the bottom of the file,
so you might want to read it starting there, rather than at the top.

   The differences between Emacs versions 18 and 19 was rather dramatic;
the introduction of frames, faces, and colors on windowing systems was
obvious to even the most casual user.

   There are differences between Emacs versions 19 and 20 as well, but
many are more subtle or harder to find.  Among the changes are the
inclusion of MULE code for languages that use non-Latin characters and
for mixing several languages in the same document; the "Customize"
facility for modifying variables without having to use Lisp; and
automatic conversion of files from Macintosh, Microsoft, and Unix
platforms.

   A number of older Lisp packages, such as Gnus, Supercite and the
calendar/diary, have been updated and enhanced to work with Emacs 20,
and are now included with the standard distribution.


File: efaq,  Node: New in Emacs 21,  Next: New in Emacs 22,  Prev: New in Emacs 20,  Up: Status of Emacs

4.4 What is different about Emacs 21?
=====================================

Emacs 21 features a thorough rewrite of the display engine.  The new
display engine supports variable-size fonts, images, and can play sounds
on platforms which support that.  As a result, the visual appearance of
Emacs, when it runs on a windowed display, is much more reminiscent of
modern GUI programs, and includes 3D widgets (used for the mode line and
the scroll bars), a configurable and extensible toolbar, tooltips
(a.k.a. balloon help), and other niceties.

   In addition, Emacs 21 supports faces on text-only terminals.  This
means that you can now have colors when you run Emacs on a GNU/Linux
console and on `xterm' with `emacs -nw'.


File: efaq,  Node: New in Emacs 22,  Prev: New in Emacs 21,  Up: Status of Emacs

4.5 What is different about Emacs 22?
=====================================

   * Emacs can be built with GTK+ widgets, and supports drag-and-drop
     operation on X.

   * Emacs 22 features support for GNU/Linux systems on S390 and x86-64
     machines, as well as support for the Mac OS X and Cygwin operating
     systems.

   * The native MS-Windows, Mac OS 9 and Mac OS X builds include full
     support for images, toolbar, and tooltips.

   * Font Lock mode, Auto Compression mode, and File Name Shadow Mode
     are enabled by default.

   * The maximum size of buffers has been doubled and is 256M on 32-bit
     machines.

   * Links can be followed with `mouse-1', in addition to `mouse-2'.

   * Mouse wheel support is enabled by default.

   * Window fringes are customizable.

   * The mode line of the selected window is now highlighted.

   * The minibuffer prompt is displayed in a distinct face.

   * Abbrev definitions are read automatically at startup.

   * Grep mode is separate from Compilation mode and has many new
     options and commands specific to grep.

   * The original Emacs macro system has been replaced by the new Kmacro
     package, which provides many new commands and features and a simple
     interface that uses the function keys F3 and F4.  Macros are
     stored in a macro ring, and can be debugged and edited
     interactively.

   * The Grand Unified Debugger (GUD) can be used with a full graphical
     user interface to GDB; this provides many features found in
     traditional development environments, making it easy to manipulate
     breakpoints, add watch points, display the call stack, etc.
     Breakpoints are visually indicated in the source buffer.

   * Many new modes and packages have been included in Emacs, such as
     Calc, TRAMP, URL, IDO, CUA, ERC, rcirc, Table, Image-Dired, SES,
     Ruler, Org, PGG, Flymake, Password, Printing, Reveal, wdired,
     t-mouse, longlines, savehist, Conf mode, Python mode, DNS mode,
     etc.

   * Leim is now part of Emacs.  Unicode support has been much
     improved, and the following input methods have been added:
     belarusian, bulgarian-bds, bulgarian-phonetic, chinese-sisheng,
     croatian, dutch, georgian, latin-alt-postfix, latin-postfix,
     latin-prefix, latvian-keyboard, lithuanian-numeric,
     lithuanian-keyboard, malayalam-inscript, rfc1345,
     russian-computer, sgml, slovenian, tamil-inscript, ucs,
     ukrainian-computer, vietnamese-telex, and welsh.

     The following language environments have also been added:
     Belarusian, Bulgarian, Chinese-EUC-TW, Croatian, French, Georgian,
     Italian, Latin-6, Latin-7, Latvian, Lithuanian, Malayalam,
     Russian, Slovenian, Swedish, Tajik, Tamil, UTF-8, Ukrainian,
     Welsh, and Windows-1255.

   * In addition, Emacs 22 now includes the Emacs Lisp Reference Manual
     (*note Emacs Lisp documentation::) and the Emacs Lisp Intro.

   Many other changes have been made in Emacs 22, use `C-h n' to get a
full list.


File: efaq,  Node: Common requests,  Next: Bugs and problems,  Prev: Status of Emacs,  Up: Top

5 Common requests
*****************

* Menu:

* Setting up a customization file::
* Using Customize::
* Colors on a TTY::
* Debugging a customization file::
* Displaying the current line or column::
* Displaying the current file name in the titlebar::
* Turning on abbrevs by default::
* Associating modes with files::
* Highlighting a region::
* Replacing highlighted text::
* Controlling case sensitivity::
* Working with unprintable characters::
* Searching for/replacing newlines::
* Yanking text in isearch::
* Wrapping words automatically::
* Turning on auto-fill by default::
* Spell-checkers::
* Checking TeX and *roff documents::
* Changing load-path::
* Using an already running Emacs process::
* Compiler error messages::
* Indenting switch statements::
* Customizing C and C++ indentation::
* Horizontal scrolling::
* Overwrite mode::
* Turning off beeping::
* Turning the volume down::
* Automatic indentation::
* Matching parentheses::
* Hiding #ifdef lines::
* Repeating commands::
* Valid X resources::
* Evaluating Emacs Lisp code::
* Changing the length of a Tab::
* Inserting text at the beginning of each line::
* Underlining paragraphs::
* Forcing the cursor to remain in the same column::
* Forcing Emacs to iconify itself::
* Using regular expressions::
* Replacing text across multiple files::
* Documentation for etags::
* Disabling backups::
* Disabling auto-save-mode::
* Going to a line by number::
* Modifying pull-down menus::
* Deleting menus and menu options::
* Turning on syntax highlighting::
* Scrolling only one line::
* Editing MS-DOS files::
* Filling paragraphs with a single space::
* Escape sequences in shell output::
* Fullscreen mode on MS-Windows::


File: efaq,  Node: Setting up a customization file,  Next: Using Customize,  Prev: Common requests,  Up: Common requests

5.1 How do I set up a `.emacs' file properly?
=============================================

*note Init File: (emacs)Init File.

   In general, new Emacs users should not have `.emacs' files, because
it causes confusing non-standard behavior.  Then they send questions to
<help-gnu-emacs@gnu.org> asking why Emacs isn't behaving as documented.

   Beginning with version 20.1, Emacs includes the new Customize
facility (*note Using Customize::).  This allows users who are
unfamiliar with Emacs Lisp to modify their `.emacs' files in a
relatively straightforward way, using menus rather than Lisp code.
Most packages support Customize as of this writing.

   While Customize might indeed make it easier to configure Emacs,
consider taking a bit of time to learn Emacs Lisp and modifying your
`.emacs' directly.  Simple configuration options are described rather
completely in *note Init File: (emacs)Init File, for users interested
in performing frequently requested, basic tasks.

   Sometimes users are unsure as to where their `.emacs' file should be
found.  Visiting the file as `~/.emacs' from Emacs will find the
correct file.


File: efaq,  Node: Using Customize,  Next: Colors on a TTY,  Prev: Setting up a customization file,  Up: Common requests

5.2 How do I start using Customize?
===================================

The main Customize entry point is `M-x customize <RET>'.  This command
takes you to a buffer listing all the available Customize groups.  From
there, you can access all customizable options and faces, change their
values, and save your changes to your init file.  *note Easy
Customization: (emacs)Easy Customization.

   If you know the name of the group in advance (e.g. "shell"), use
`M-x customize-group <RET>'.

   If you wish to customize a single option, use `M-x customize-option
<RET>'.  This command prompts you for the name of the option to
customize, with completion.


File: efaq,  Node: Colors on a TTY,  Next: Debugging a customization file,  Prev: Using Customize,  Up: Common requests

5.3 How do I get colors and syntax highlighting on a TTY?
=========================================================

In Emacs 21.1 and later, colors and faces are supported in non-windowed
mode, i.e. on Unix and GNU/Linux text-only terminals and consoles, and
when invoked as `emacs -nw' on X, MS-Windows, and Mac.  (Colors and
faces were supported in the MS-DOS port since Emacs 19.29.)  Emacs
automatically detects color support at startup and uses it if
available.  If you think that your terminal supports colors, but Emacs
won't use them, check the `termcap' entry for your display type for
color-related capabilities.

   The command `M-x list-colors-display' pops up a window which
exhibits all the colors Emacs knows about on the current display.

   Syntax highlighting is on by default since version 22.1.


File: efaq,  Node: Debugging a customization file,  Next: Displaying the current line or column,  Prev: Colors on a TTY,  Up: Common requests

5.4 How do I debug a `.emacs' file?
===================================

Start Emacs with the `-debug-init' command-line option.  This enables
the Emacs Lisp debugger before evaluating your `.emacs' file, and
places you in the debugger if something goes wrong.  The top line in
the `trace-back' buffer will be the error message, and the second or
third line of that buffer will display the Lisp code from your `.emacs'
file that caused the problem.

   You can also evaluate an individual function or argument to a
function in your `.emacs' file by moving the cursor to the end of the
function or argument and typing `C-x C-e' (`M-x eval-last-sexp').

   Use `C-h v' (`M-x describe-variable') to check the value of
variables which you are trying to set or use.


File: efaq,  Node: Displaying the current line or column,  Next: Displaying the current file name in the titlebar,  Prev: Debugging a customization file,  Up: Common requests

5.5 How do I make Emacs display the current line (or column) number?
====================================================================

To have Emacs automatically display the current line number of the point
in the mode line, do `M-x line-number-mode'.  You can also put the form

     (setq line-number-mode t)

in your `.emacs' file to achieve this whenever you start Emacs.  (Line
number display is on by default, unless your site-specific
initialization disables it.) Note that Emacs will not display the line
number if the buffer's size in bytes is larger than the value of the
variable `line-number-display-limit'.

   You can similarly display the current column with `M-x
column-number-mode', or by putting the form

     (setq column-number-mode t)

in your `.emacs' file.

   The `"%c"' format specifier in the variable `mode-line-format' will
insert the current column's value into the mode line.  See the
documentation for `mode-line-format' (using `C-h v mode-line-format
<RET>') for more information on how to set and use this variable.

   Users of all Emacs versions can display the current column using the
`column' package written by Per Abrahamsen <abraham@dina.kvl.dk>.
*Note Packages that do not come with Emacs::, for instructions on how
to get it.

   None of the `vi' emulation modes provide the "set number" capability
of `vi' (as far as we know).  The `setnu' package written by Kyle Jones
<kyle@wonderworks.com> provides this feature.  So too does
`wb-line-number', written by Naoki Nakamura
<naoki.y.nakamura@nifty.com>.


File: efaq,  Node: Displaying the current file name in the titlebar,  Next: Turning on abbrevs by default,  Prev: Displaying the current line or column,  Up: Common requests

5.6 How can I modify the titlebar to contain the current file name?
===================================================================

The contents of an Emacs frame's titlebar is controlled by the variable
`frame-title-format', which has the same structure as the variable
`mode-line-format'.  (Use `C-h v' or `M-x describe-variable' to get
information about one or both of these variables.)

   By default, the titlebar for a frame does contain the name of the
buffer currently being visited, except if there is a single frame.  In
such a case, the titlebar contains Emacs invocation name and the name
of the machine at which Emacs was invoked.  This is done by setting
`frame-title-format' to the default value of

     (multiple-frames "%b" ("" invocation-name "@" system-name))

   To modify the behavior such that frame titlebars contain the buffer's
name regardless of the number of existing frames, include the following
in your `.emacs':

     (setq frame-title-format "%b")


File: efaq,  Node: Turning on abbrevs by default,  Next: Associating modes with files,  Prev: Displaying the current file name in the titlebar,  Up: Common requests

5.7 How do I turn on abbrevs by default just in mode MYMODE?
============================================================

Put this in your `.emacs' file:

     (condition-case ()
        (quietly-read-abbrev-file)
       (file-error nil))

     (add-hook 'MYMODE-mode-hook
               (lambda ()
                (setq abbrev-mode t)))

   Starting with Emacs 22, the standard abbrevs file is read
automatically at startup, so the first of these two forms becomes
unnecessary.


File: efaq,  Node: Associating modes with files,  Next: Highlighting a region,  Prev: Turning on abbrevs by default,  Up: Common requests

5.8 How do I make Emacs use a certain major mode for certain files?
===================================================================

If you want to use a certain mode FOO for all files whose names end
with the extension `.BAR', this will do it for you:

     (setq auto-mode-alist (cons '("\\.BAR\\'" . FOO-mode) auto-mode-alist))

   Otherwise put this somewhere in the first line of any file you want
to edit in the mode FOO (in the second line, if the first line begins
with `#!'):

     -*- FOO -*-

   Beginning with Emacs 19, the variable `interpreter-mode-alist'
specifies which mode to use when loading a shell script.  (Emacs
determines which interpreter you're using by examining the first line of
the script.)  This feature only applies when the file name doesn't
indicate which mode to use.  Use `C-h v' (or `M-x describe-variable')
on `interpreter-mode-alist' to learn more.


File: efaq,  Node: Highlighting a region,  Next: Replacing highlighted text,  Prev: Associating modes with files,  Up: Common requests

5.9 How can I highlight a region of text in Emacs?
==================================================

You can cause the region to be highlighted when the mark is active by
including

     (transient-mark-mode t)

in your `.emacs' file.


File: efaq,  Node: Replacing highlighted text,  Next: Controlling case sensitivity,  Prev: Highlighting a region,  Up: Common requests

5.10 How can I replace highlighted text with what I type?
=========================================================

Use `delete-selection-mode', which you can start automatically by
placing the following Lisp form in your `.emacs' file:

     (delete-selection-mode 1)

   According to the documentation string for `delete-selection-mode'
(which you can read using `M-x describe-function <RET>
delete-selection-mode <RET>'):

     When ON, typed text replaces the selection if the selection is
     active.  When OFF, typed text is just inserted at point.

   This mode also allows you to delete (not kill) the highlighted
region by pressing <DEL>.


File: efaq,  Node: Controlling case sensitivity,  Next: Working with unprintable characters,  Prev: Replacing highlighted text,  Up: Common requests

5.11 How do I control Emacs's case-sensitivity when searching/replacing?
========================================================================

For searching, the value of the variable `case-fold-search' determines
whether they are case sensitive:

     (setq case-fold-search nil) ; make searches case sensitive
     (setq case-fold-search t)   ; make searches case insensitive

   Similarly, for replacing, the variable `case-replace' determines
whether replacements preserve case.

   You can also toggle case sensitivity at will in isearch with `M-c'.

   To change the case sensitivity just for one major mode, use the major
mode's hook.  For example:

     (add-hook 'FOO-mode-hook
               (lambda ()
                (setq case-fold-search nil)))


File: efaq,  Node: Working with unprintable characters,  Next: Searching for/replacing newlines,  Prev: Controlling case sensitivity,  Up: Common requests

5.12 How do I search for, delete, or replace unprintable (eight-bit or control) characters?
===========================================================================================

To search for a single character that appears in the buffer as, for
example, `\237', you can type `C-s C-q 2 3 7'.  (This assumes the value
of `search-quote-char' is 17 (i.e., `C-q').)  Searching for *all*
unprintable characters is best done with a regular expression
("regexp") search.  The easiest regexp to use for the unprintable chars
is the complement of the regexp for the printable chars.

   * Regexp for the printable chars: `[\t\n\r\f -~]'

   * Regexp for the unprintable chars: `[^\t\n\r\f -~]'


   To type these special characters in an interactive argument to
`isearch-forward-regexp' or `re-search-forward', you need to use `C-q'.
(`\t', `\n', `\r', and `\f' stand respectively for <TAB>, <LFD>, <RET>,
and `C-l'.)  So, to search for unprintable characters using
`re-search-forward':

   `M-x re-search-forward <RET> [^ <TAB> C-q <LFD> C-q <RET> C-q C-l
<SPC> -~] <RET>'

   Using `isearch-forward-regexp':

   `C-M-s [^ <TAB> <LFD> C-q <RET> C-q C-l <SPC> -~]'

   To delete all unprintable characters, simply use replace-regexp:

   `M-x replace-regexp <RET> [^ <TAB> C-q <LFD> C-q <RET> C-q C-l <SPC>
-~] <RET> <RET>'

   Replacing is similar to the above.  To replace all unprintable
characters with a colon, use:

   M-x replace-regexp <RET> [^ <TAB> C-q <LFD> C-q <RET> C-q C-l <SPC>
-~] <RET> : <RET>


File: efaq,  Node: Searching for/replacing newlines,  Next: Yanking text in isearch,  Prev: Working with unprintable characters,  Up: Common requests

5.13 How do I input a newline character in isearch or query-replace?
====================================================================

Use `C-q C-j'.  For more information, see *note Special Input for
Incremental Search: (emacs)Special Isearch.


File: efaq,  Node: Yanking text in isearch,  Next: Wrapping words automatically,  Prev: Searching for/replacing newlines,  Up: Common requests

5.14 How do I copy text from the kill ring into the search string?
==================================================================

Use `M-y'.  *note Isearch Yanking: (emacs)Isearch Yank.


File: efaq,  Node: Wrapping words automatically,  Next: Turning on auto-fill by default,  Prev: Yanking text in isearch,  Up: Common requests

5.15 How do I make Emacs wrap words for me?
===========================================

Use `auto-fill-mode', activated by typing `M-x auto-fill-mode'.  The
default maximum line width is 70, determined by the variable
`fill-column'.  To learn how to turn this on automatically, see *note
Turning on auto-fill by default::.


File: efaq,  Node: Turning on auto-fill by default,  Next: Spell-checkers,  Prev: Wrapping words automatically,  Up: Common requests

5.16 How do I turn on `auto-fill-mode' by default?
==================================================

To turn on `auto-fill-mode' just once for one buffer, use `M-x
auto-fill-mode'.

   To turn it on for every buffer in a certain mode, you must use the
hook for that mode.  For example, to turn on `auto-fill' mode for all
text buffers, including the following in your `.emacs' file:

     (add-hook 'text-mode-hook 'turn-on-auto-fill)

   If you want `auto-fill' mode on in all major modes, do this:

     (setq-default auto-fill-function 'do-auto-fill)


File: efaq,  Node: Spell-checkers,  Next: Checking TeX and *roff documents,  Prev: Turning on auto-fill by default,  Up: Common requests

5.17 Where can I get a better spelling checker for Emacs?
=========================================================

Use Ispell.  *Note Ispell::.


File: efaq,  Node: Checking TeX and *roff documents,  Next: Changing load-path,  Prev: Spell-checkers,  Up: Common requests

5.18 How can I spell-check TeX or *roff documents?
==================================================

Use Ispell.  Ispell can handle TeX and *roff documents.  *Note Ispell::.


File: efaq,  Node: Changing load-path,  Next: Using an already running Emacs process,  Prev: Checking TeX and *roff documents,  Up: Common requests

5.19 How do I change `load-path'?
=================================

In general, you should only add to the `load-path'.  You can add
directory /DIR/SUBDIR to the load path like this:

     (setq load-path (cons "/dir/subdir/" load-path))

   To do this relative to your home directory:

     (setq load-path (cons "~/mysubdir/" load-path))


File: efaq,  Node: Using an already running Emacs process,  Next: Compiler error messages,  Prev: Changing load-path,  Up: Common requests

5.20 How do I use an already running Emacs from another window?
===============================================================

`emacsclient', which comes with Emacs, is for editing a file using an
already running Emacs rather than starting up a new Emacs.  It does
this by sending a request to the already running Emacs, which must be
expecting the request.

   * Setup:

     Emacs must have executed the `server-start' function for
     `emacsclient' to work.  This can be done either by a command line
     option:

          emacs -f server-start

     or by invoking `server-start' from `.emacs':

          (if (SOME CONDITIONS ARE MET) (server-start))

     When this is done, Emacs creates a Unix domain socket named
     `server' in `/tmp/emacsUSERID'. See `server-socket-dir'.

     To get your news reader, mail reader, etc., to invoke
     `emacsclient', try setting the environment variable `EDITOR' (or
     sometimes `VISUAL') to the value `emacsclient'.  You may have to
     specify the full pathname of the `emacsclient' program instead.
     Examples:

          # csh commands:
          setenv EDITOR emacsclient

          # using full pathname
          setenv EDITOR /usr/local/emacs/etc/emacsclient

          # sh command:
          EDITOR=emacsclient ; export EDITOR

   * Normal use:

     When `emacsclient' is run, it connects to the socket and passes its
     command line options to Emacs, which at the next opportunity will
     visit the files specified.  (Line numbers can be specified just
     like with Emacs.)  The user will have to switch to the Emacs
     window by hand.  When the user is done editing a file, the user
     can type `C-x #' (or `M-x server-edit') to indicate this.  If
     there is another buffer requested by `emacsclient', Emacs will
     switch to it; otherwise `emacsclient' will exit, signaling the
     calling program to continue.

     There is an enhanced version of `emacsclient' called `gnuserv',
     written by Andy Norman <ange@hplb.hpl.hp.com> (*note Packages that
     do not come with Emacs::).  `gnuserv' uses Internet domain
     sockets, so it can work across most network connections.

     The most recent `gnuserv' package is available at

     `http://meltin.net/hacks/emacs/'



File: efaq,  Node: Compiler error messages,  Next: Indenting switch statements,  Prev: Using an already running Emacs process,  Up: Common requests

5.21 How do I make Emacs recognize my compiler's funny error messages?
======================================================================

Customize the `compilation-error-regexp-alist' variable.


File: efaq,  Node: Indenting switch statements,  Next: Customizing C and C++ indentation,  Prev: Compiler error messages,  Up: Common requests

5.22 How do I change the indentation for `switch'?
==================================================

Many people want to indent their `switch' statements like this:

     f()
     {
       switch(x) {
         case A:
           x1;
           break;
         case B:
           x2;
           break;
         default:
           x3;
       }
     }

   The solution at first appears to be: set `c-indent-level' to 4 and
`c-label-offset' to -2.  However, this will give you an indentation
spacing of four instead of two.

   The _real_ solution is to use `cc-mode' (the default mode for C
programming in Emacs 20 and later) and add the following line to your
`.emacs':

     (c-set-offset 'case-label '+)

   There appears to be no way to do this with the old `c-mode'.


File: efaq,  Node: Customizing C and C++ indentation,  Next: Horizontal scrolling,  Prev: Indenting switch statements,  Up: Common requests

5.23 How to customize indentation in C, C++, and Java buffers?
==============================================================

The Emacs `cc-mode' features an interactive procedure for customizing
the indentation style, which is fully explained in the `CC Mode' manual
that is part of the Emacs distribution, see *note Customization
Indentation: (ccmode)Customizing Indentation.  Here's a short summary
of the procedure:

  1. Go to the beginning of the first line where you don't like the
     indentation and type `C-c C-o'.  Emacs will prompt you for the
     syntactic symbol; type <RET> to accept the default it suggests.

  2. Emacs now prompts for the offset of this syntactic symbol, showing
     the default (the current definition) inside parentheses.  You can
     choose one of these:

    `0'
          No extra indentation.

    `+'
          Indent one basic offset.

    `-'
          Outdent one basic offset.

    `++'
          Indent two basic offsets

    `--'
          Outdent two basic offsets.

    `*'
          Indent half basic offset.

    `/'
          Outdent half basic offset.

  3. After choosing one of these symbols, type `C-c C-q' to reindent
     the line or the block according to what you just specified.

  4. If you don't like the result, go back to step 1.  Otherwise, add
     the following line to your `.emacs':

          (c-set-offset 'SYNTACTIC-SYMBOL OFFSET)

     where SYNTACTIC-SYMBOL is the name Emacs shows in the minibuffer
     when you type `C-c C-o' at the beginning of the line, and OFFSET
     is one of the indentation symbols listed above (`+', `/', `0',
     etc.) that you've chosen during the interactive procedure.

  5. Go to the next line whose indentation is not to your liking and
     repeat the process there.

   It is recommended to put all the resulting `(c-set-offset ...)'
customizations inside a C mode hook, like this:

     (defun my-c-mode-hook ()
       (c-set-offset ...)
       (c-set-offset ...))
     (add-hook 'c-mode-hook 'my-c-mode-hook)

Using `c-mode-hook' avoids the need to put a `(require 'cc-mode)' into
your `.emacs' file, because `c-set-offset' might be unavailable when
`cc-mode' is not loaded.

   Note that `c-mode-hook' runs for C source files only; use
`c++-mode-hook' for C++ sources, `java-mode-hook' for Java sources,
etc.  If you want the same customizations to be in effect in _all_
languages supported by `cc-mode', use `c-mode-common-hook'.


File: efaq,  Node: Horizontal scrolling,  Next: Overwrite mode,  Prev: Customizing C and C++ indentation,  Up: Common requests

5.24 How can I make Emacs automatically scroll horizontally?
============================================================

In Emacs 21 and later, this is on by default: if the variable
`truncate-lines' is non-`nil' in the current buffer, Emacs
automatically scrolls the display horizontally when point moves off the
left or right edge of the window.

   Note that this is overridden by the variable
`truncate-partial-width-windows' if that variable is non-nil and the
current buffer is not full-frame width.

   In Emacs 20, use the `hscroll-mode'.  Here is some information from
the documentation, available by typing `C-h f hscroll-mode <RET>':

   Automatically scroll horizontally when the point moves off the left
or right edge of the window.

   - Type `M-x hscroll-mode' to enable it in the current buffer.

   - Type `M-x hscroll-global-mode' to enable it in every buffer.

   - `turn-on-hscroll' is useful in mode hooks as in:

          (add-hook 'text-mode-hook 'turn-on-hscroll)

   - `hscroll-margin' controls how close the cursor can get to the edge
     of the window.

   - `hscroll-step-percent' controls how far to jump once we decide to
     do so.


File: efaq,  Node: Overwrite mode,  Next: Turning off beeping,  Prev: Horizontal scrolling,  Up: Common requests

5.25 How do I make Emacs "typeover" or "overwrite" instead of inserting?
========================================================================

`M-x overwrite-mode' (a minor mode).  This toggles `overwrite-mode' on
and off, so exiting from `overwrite-mode' is as easy as another `M-x
overwrite-mode'.

   On some systems, <Insert> toggles `overwrite-mode' on and off.


File: efaq,  Node: Turning off beeping,  Next: Turning the volume down,  Prev: Overwrite mode,  Up: Common requests

5.26 How do I stop Emacs from beeping on a terminal?
====================================================

Martin R. Frank <martin@cc.gatech.edu> writes:

   Tell Emacs to use the "visible bell" instead of the audible bell,
and set the visible bell to nothing.

   That is, put the following in your `TERMCAP' environment variable
(assuming you have one):

     ... :vb=: ...

   And evaluate the following Lisp form:

     (setq visible-bell t)


File: efaq,  Node: Turning the volume down,  Next: Automatic indentation,  Prev: Turning off beeping,  Up: Common requests

5.27 How do I turn down the bell volume in Emacs running under X?
=================================================================

On X Window system, you can adjust the bell volume and duration for all
programs with the shell command `xset'.

   Invoking `xset' without any arguments produces some basic
information, including the following:

     usage:  xset [-display host:dpy] option ...
       To turn bell off:
           -b                b off               b 0
       To set bell volume, pitch and duration:
            b [vol [pitch [dur]]]          b on


File: efaq,  Node: Automatic indentation,  Next: Matching parentheses,  Prev: Turning the volume down,  Up: Common requests

5.28 How do I tell Emacs to automatically indent a new line to the indentation of the previous line?
====================================================================================================

Such behavior is automatic in Emacs 20 and later.  From the `etc/NEWS'
file for Emacs 20.2:

     ** In Text mode, now only blank lines separate paragraphs.  This makes
     it possible to get the full benefit of Adaptive Fill mode in Text mode,
     and other modes derived from it (such as Mail mode).  <TAB> in Text
     mode now runs the command `indent-relative'; this makes a practical
     difference only when you use indented paragraphs.

     As a result, the old Indented Text mode is now identical to Text mode,
     and is an alias for it.

     If you want spaces at the beginning of a line to start a paragraph, use
     the new mode, Paragraph Indent Text mode.

   If you have `auto-fill-mode' turned on (*note Turning on auto-fill
by default::), you can tell Emacs to prefix every line with a certain
character sequence, the "fill prefix".  Type the prefix at the
beginning of a line, position point after it, and then type `C-x .'
(`set-fill-prefix') to set the fill prefix.  Thereafter, auto-filling
will automatically put the fill prefix at the beginning of new lines,
and `M-q' (`fill-paragraph') will maintain any fill prefix when
refilling the paragraph.

   If you have paragraphs with different levels of indentation, you will
have to set the fill prefix to the correct value each time you move to a
new paragraph.  There are many packages available to deal with this
(*note Packages that do not come with Emacs::).  Look for "fill" and
"indent" keywords for guidance.


File: efaq,  Node: Matching parentheses,  Next: Hiding #ifdef lines,  Prev: Automatic indentation,  Up: Common requests

5.29 How do I show which parenthesis matches the one I'm looking at?
====================================================================

Call `show-paren-mode' in your `.emacs' file:

     (show-paren-mode 1)

   You can also enable this mode by selecting the `Paren Match
Highlighting' option from the `Options' menu of the Emacs menu bar at
the top of any Emacs frame.

   Alternatives to this mode include:

   * If you're looking at a right parenthesis (or brace or bracket) you
     can delete it and reinsert it.  Emacs will momentarily move the
     cursor to the matching parenthesis.

   * `C-M-f' (`forward-sexp') and `C-M-b' (`backward-sexp') will skip
     over one set of balanced parentheses, so you can see which
     parentheses match.  (You can train it to skip over balanced
     brackets and braces at the same time by modifying the syntax
     table.)

   * Here is some Emacs Lisp that will make the <%> key show the
     matching parenthesis, like in `vi'.  In addition, if the cursor
     isn't over a parenthesis, it simply inserts a % like normal.

          ;; By an unknown contributor

          (global-set-key "%" 'match-paren)

          (defun match-paren (arg)
            "Go to the matching paren if on a paren; otherwise insert %."
            (interactive "p")
            (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
                  ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
                  (t (self-insert-command (or arg 1)))))



File: efaq,  Node: Hiding #ifdef lines,  Next: Repeating commands,  Prev: Matching parentheses,  Up: Common requests

5.30 In C mode, can I show just the lines that will be left after `#ifdef' commands are handled by the compiler?
================================================================================================================

`M-x hide-ifdef-mode'.  (This is a minor mode.)  You might also want to
investigate `cpp.el', which is distributed with Emacs.


File: efaq,  Node: Repeating commands,  Next: Valid X resources,  Prev: Hiding #ifdef lines,  Up: Common requests

5.31 How do I repeat a command as many times as possible?
=========================================================

As of Emacs 20.3, there is indeed a `repeat' command (`C-x z') that
repeats the last command.  If you preface it with a prefix argument,
the prefix arg is applied to the command.

   You can also type `C-x <ESC> <ESC>' (`repeat-complex-command') to
reinvoke commands that used the minibuffer to get arguments.  In
`repeat-complex-command' you can type `M-p' and `M-n' (and also
up-arrow and down-arrow, if your keyboard has these keys) to scan
through all the different complex commands you've typed.

   To repeat a set of commands, use keyboard macros.  Use `C-x (' and
`C-x )' to make a keyboard macro that invokes the command and then type
`C-x e'.  (*note Keyboard Macros: (emacs)Keyboard Macros.)

   If you're really desperate for the `.' command in `vi' that redoes
the last insertion/deletion, use VIPER, a `vi' emulation mode which
comes with Emacs, and which appears to support it.  (*Note VIPER::.)


File: efaq,  Node: Valid X resources,  Next: Evaluating Emacs Lisp code,  Prev: Repeating commands,  Up: Common requests

5.32 What are the valid X resource settings (i.e., stuff in .Xdefaults)?
========================================================================

*note X Resources: (emacs)X Resources.

   You can also use a resource editor, such as editres (for X11R5 and
onwards), to look at the resource names for the menu bar, assuming Emacs
was compiled with the X toolkit.


File: efaq,  Node: Evaluating Emacs Lisp code,  Next: Changing the length of a Tab,  Prev: Valid X resources,  Up: Common requests

5.33 How do I execute ("evaluate") a piece of Emacs Lisp code?
==============================================================

There are a number of ways to execute ("evaluate", in Lisp lingo) an
Emacs Lisp "form":

   * If you want it evaluated every time you run Emacs, put it in a file
     named `.emacs' in your home directory.  This is known as "your
     `.emacs' file," and contains all of your personal customizations.

   * You can type the form in the `*scratch*' buffer, and then type
     <LFD> (or `C-j') after it.  The result of evaluating the form will
     be inserted in the buffer.

   * In `emacs-lisp-mode', typing `C-M-x' evaluates a top-level form
     before or around point.

   * Typing `C-x C-e' in any buffer evaluates the Lisp form immediately
     before point and prints its value in the echo area.

   * Typing `M-:' or `M-x eval-expression' allows you to type a Lisp
     form in the minibuffer which will be evaluated once you press
     <RET>.

   * You can use `M-x load-file' to have Emacs evaluate all the Lisp
     forms in a file.  (To do this from Lisp use the function `load'
     instead.)

     The functions `load-library', `eval-region', `eval-buffer',
     `require', and `autoload' are also useful; see *note Emacs Lisp
     documentation::, if you want to learn more about them.



File: efaq,  Node: Changing the length of a Tab,  Next: Inserting text at the beginning of each line,  Prev: Evaluating Emacs Lisp code,  Up: Common requests

5.34 How do I change Emacs's idea of the <TAB> character's length?
==================================================================

Set the variable `default-tab-width'.  For example, to set <TAB> stops
every 10 characters, insert the following in your `.emacs' file:

     (setq default-tab-width 10)

   Do not confuse variable `tab-width' with variable `tab-stop-list'.
The former is used for the display of literal <TAB> characters.  The
latter controls what characters are inserted when you press the <TAB>
character in certain modes.


File: efaq,  Node: Inserting text at the beginning of each line,  Next: Underlining paragraphs,  Prev: Changing the length of a Tab,  Up: Common requests

5.35 How do I insert <some text> at the beginning of every line?
================================================================

To do this to an entire buffer, type `M-< M-x replace-regexp <RET> ^
<RET> your text <RET>'.

   To do this to a region, use `string-insert-rectangle'.  Set the mark
(`C-<SPC>') at the beginning of the first line you want to prefix, move
the cursor to last line to be prefixed, and type `M-x
string-insert-rectangle <RET>'.  To do this for the whole buffer, type
`C-x h M-x string-insert-rectangle <RET>'.

   If you are trying to prefix a yanked mail message with `>', you
might want to set the variable `mail-yank-prefix'.  In Message buffers,
you can even use `M-;' to cite yanked messages (`M-;' runs the function
`comment-region', it is a general-purpose mechanism to comment regions)
(*note Changing the included text prefix::).


File: efaq,  Node: Underlining paragraphs,  Next: Forcing the cursor to remain in the same column,  Prev: Inserting text at the beginning of each line,  Up: Common requests

5.36 How do I insert `_^H' before each character in a region to get an underlined paragraph?
============================================================================================

Mark the region and then type `M-x underline-region <RET>'.


File: efaq,  Node: Forcing the cursor to remain in the same column,  Next: Forcing Emacs to iconify itself,  Prev: Underlining paragraphs,  Up: Common requests

5.37 How do I make Emacs behave like this: when I go up or down, the cursor should stay in the same column even if the line is too short?
=========================================================================================================================================

Use `M-x picture-mode'.

   See also the variable `track-eol' and the command `set-goal-column'
bound to `C-x C-n' (*note Moving Point: (emacs)Moving Point.).


File: efaq,  Node: Forcing Emacs to iconify itself,  Next: Using regular expressions,  Prev: Forcing the cursor to remain in the same column,  Up: Common requests

5.38 How do I tell Emacs to iconify itself?
===========================================

`C-z' iconifies Emacs when running under X and suspends Emacs
otherwise.  *note Frame Commands: (emacs)Frame Commands.


File: efaq,  Node: Using regular expressions,  Next: Replacing text across multiple files,  Prev: Forcing Emacs to iconify itself,  Up: Common requests

5.39 How do I use regexps (regular expressions) in Emacs?
=========================================================

*note Regexp Backslash: (emacs)Regexp Backslash.

   The `or' operator is `\|', not `|', and the grouping operators are
`\(' and `\)'.  Also, the string syntax for a backslash is `\\'.  To
specify a regular expression like `xxx\(foo\|bar\)' in a Lisp string,
use `xxx\\(foo\\|bar\\)'.

   Note the doubled backslashes!

   * Unlike in Unix `grep', `sed', etc., a complement character set
     (`[^...]')  can match a newline character (<LFD> a.k.a.  `C-j'
     a.k.a. `\n'), unless newline is mentioned as one of the characters
     not to match.

   * The character syntax regexps (e.g., `\sw') are not meaningful
     inside character set regexps (e.g., `[aeiou]').  (This is actually
     typical for regexp syntax.)



File: efaq,  Node: Replacing text across multiple files,  Next: Documentation for etags,  Prev: Using regular expressions,  Up: Common requests

5.40 How do I perform a replace operation across more than one file?
====================================================================

As of Emacs 19.29, Dired mode (`M-x dired <RET>', or `C-x d') supports
the command `dired-do-query-replace' (`Q'), which allows users to
replace regular expressions in multiple files.

   You can use this command to perform search/replace operations on
multiple files by following the following steps:

   * Assemble a list of files you want to operate on with either
     `find-dired', `find-name-dired' or `find-grep-dired'.

   * Mark all files in the resulting Dired buffer using `t'.

   * Use `Q' to start a `query-replace-regexp' session on the marked
     files.

   * To accept all replacements in each file, hit `!'.

   Another way to do the same thing is to use the "tags" feature of
Emacs: it includes the command `tags-query-replace' which performs a
query-replace across all the files mentioned in the `TAGS' file.  *note
Tags Search: (emacs)Tags Search.


File: efaq,  Node: Documentation for etags,  Next: Disabling backups,  Prev: Replacing text across multiple files,  Up: Common requests

5.41 Where is the documentation for `etags'?
============================================

The `etags' man page should be in the same place as the `emacs' man
page.

   Quick command-line switch descriptions are also available.  For
example, `etags -H'.


File: efaq,  Node: Disabling backups,  Next: Disabling auto-save-mode,  Prev: Documentation for etags,  Up: Common requests

5.42 How do I disable backup files?
===================================

You probably don't want to do this, since backups are useful, especially
when something goes wrong.

   To avoid seeing backup files (and other "uninteresting" files) in
Dired, load `dired-x' by adding the following to your `.emacs' file:

     (add-hook 'dired-load-hook
               (lambda ()
                (load "dired-x")))

   With `dired-x' loaded, `M-o' toggles omitting in each dired buffer.
You can make omitting the default for new dired buffers by putting the
following in your `.emacs':

     (add-hook 'dired-mode-hook 'dired-omit-toggle)

   If you're tired of seeing backup files whenever you do an `ls' at
the Unix shell, try GNU `ls' with the `-B' option.  GNU `ls' is part of
the GNU Fileutils package, available from `ftp.gnu.org' and its mirrors
(*note Current GNU distributions::).

   To disable or change the way backups are made, *note (emacs)Backup
Names::.

   Beginning with Emacs 21.1, you can control where Emacs puts backup
files by customizing the variable `backup-directory-alist'.  This
variable's value specifies that files whose names match specific patters
should have their backups put in certain directories.  A typical use is
to add the element `("." . DIR)' to force Emacs to put *all* backup
files in the directory `dir'.


File: efaq,  Node: Disabling auto-save-mode,  Next: Going to a line by number,  Prev: Disabling backups,  Up: Common requests

5.43 How do I disable `auto-save-mode'?
=======================================

You probably don't want to do this, since auto-saving is useful,
especially when Emacs or your computer crashes while you are editing a
document.

   Instead, you might want to change the variable `auto-save-interval',
which specifies how many keystrokes Emacs waits before auto-saving.
Increasing this value forces Emacs to wait longer between auto-saves,
which might annoy you less.

   You might also want to look into Sebastian Kremer's `auto-save'
package (*note Packages that do not come with Emacs::).  This package
also allows you to place all auto-save files in one directory, such as
`/tmp'.

   To disable or change how `auto-save-mode' works, *note (emacs)Auto
Save::.


File: efaq,  Node: Going to a line by number,  Next: Modifying pull-down menus,  Prev: Disabling auto-save-mode,  Up: Common requests

5.44 How can I go to a certain line given its number?
=====================================================

Are you sure you indeed need to go to a line by its number?  Perhaps all
you want is to display a line in your source file for which a compiler
printed an error message?  If so, compiling from within Emacs using the
`M-x compile' and `M-x recompile' commands is a much more effective way
of doing that.  Emacs automatically intercepts the compile error
messages, inserts them into a special buffer called `*compilation*',
and lets you visit the locus of each message in the source.  Type `C-x
`' to step through the offending lines one by one (starting with Emacs
22, you can also use `M-g M-p' and `M-g M-n' to go to the previous and
next matches directly).  Click `Mouse-2' or press <RET> on a message
text in the `*compilation*' buffer to go to the line whose number is
mentioned in that message.

   But if you indeed need to go to a certain text line, type `M-g M-g'
(which is the default binding of the `goto-line' function starting with
Emacs 22).  Emacs will prompt you for the number of the line and go to
that line.

   You can do this faster by invoking `goto-line' with a numeric
argument that is the line's number.  For example, `C-u 286 M-g M-g'
will jump to line number 286 in the current buffer.


File: efaq,  Node: Modifying pull-down menus,  Next: Deleting menus and menu options,  Prev: Going to a line by number,  Up: Common requests

5.45 How can I create or modify new pull-down menu options?
===========================================================

Each menu title (e.g., `File', `Edit', `Buffers') represents a local or
global keymap.  Selecting a menu title with the mouse displays that
keymap's non-`nil' contents in the form of a menu.

   So to add a menu option to an existing menu, all you have to do is
add a new definition to the appropriate keymap.  Adding a `Forward Word'
item to the `Edit' menu thus requires the following Lisp code:

     (define-key global-map
       [menu-bar edit forward]
       '("Forward word" . forward-word))

The first line adds the entry to the global keymap, which includes
global menu bar entries.  Replacing the reference to `global-map' with
a local keymap would add this menu option only within a particular mode.

   The second line describes the path from the menu-bar to the new
entry.  Placing this menu entry underneath the `File' menu would mean
changing the word `edit' in the second line to `file'.

   The third line is a cons cell whose first element is the title that
will be displayed, and whose second element is the function that will be
called when that menu option is invoked.

   To add a new menu, rather than a new option to an existing menu, we
must define an entirely new keymap:

     (define-key global-map [menu-bar words]
       (cons "Words" (make-sparse-keymap "Words")))

   The above code creates a new sparse keymap, gives it the name
`Words', and attaches it to the global menu bar.  Adding the `Forward
Word' item to this new menu would thus require the following code:

     (define-key global-map
       [menu-bar words forward]
       '("Forward word" . forward-word))

Note that because of the way keymaps work, menu options are displayed
with the more recently defined items at the top.  Thus if you were to
define menu options `foo', `bar', and `baz' (in that order), the menu
option `baz' would appear at the top, and `foo' would be at the bottom.

   One way to avoid this problem is to use the function
`define-key-after', which works the same as `define-key', but lets you
modify where items appear.  The following Lisp code would insert the
`Forward Word' item in the `Edit' menu immediately following the `Undo'
item:

     (define-key-after
       (lookup-key global-map [menu-bar edit])
       [forward]
       '("Forward word" . forward-word)
       'undo)

   Note how the second and third arguments to `define-key-after' are
different from those of `define-key', and that we have added a new
(final) argument, the function after which our new key should be
defined.

   To move a menu option from one position to another, simply evaluate
`define-key-after' with the appropriate final argument.

   More detailed information--and more examples of how to create and
modify menu options--are in the `Emacs Lisp Reference Manual', under
"Menu Keymaps."  (*Note Emacs Lisp documentation::, for information on
this manual.)


File: efaq,  Node: Deleting menus and menu options,  Next: Turning on syntax highlighting,  Prev: Modifying pull-down menus,  Up: Common requests

5.46 How do I delete menus and menu options?
============================================

The simplest way to remove a menu is to set its keymap to `nil'.  For
example, to delete the `Words' menu (*note Modifying pull-down
menus::), use:

     (define-key global-map [menu-bar words] nil)

   Similarly, removing a menu option requires redefining a keymap entry
to `nil'.  For example, to delete the `Forward word' menu option from
the `Edit' menu (we added it in *note Modifying pull-down menus::), use:

     (define-key global-map [menu-bar edit forward] nil)


File: efaq,  Node: Turning on syntax highlighting,  Next: Scrolling only one line,  Prev: Deleting menus and menu options,  Up: Common requests

5.47 How do I turn on syntax highlighting?
==========================================

`font-lock-mode' is the standard way to have Emacs perform syntax
highlighting in the current buffer.  It is enabled by default in Emacs
22.1 and later.

   With `font-lock-mode' turned on, different types of text will appear
in different colors.  For instance, in a programming mode, variables
will appear in one face, keywords in a second, and comments in a third.

   Earlier versions of Emacs supported hilit19, a similar package.  Use
of hilit19 is now considered non-standard, although `hilit19.el' comes
with the stock Emacs distribution.  It is no longer maintained.

   To turn `font-lock-mode' off within an existing buffer, use `M-x
font-lock-mode <RET>'.

   In Emacs 21 and earlier versions, you could use the following code in
your `.emacs' file to turn on `font-lock-mode' globally:

     (global-font-lock-mode 1)

   Highlighting a buffer with `font-lock-mode' can take quite a while,
and cause an annoying delay in display, so several features exist to
work around this.

   In Emacs 21 and later, turning on `font-lock-mode' automatically
activates the new "Just-In-Time fontification" provided by
`jit-lock-mode'.  `jit-lock-mode' defers the fontification of portions
of buffer until you actually need to see them, and can also fontify
while Emacs is idle.  This makes display of the visible portion of a
buffer almost instantaneous.  For details about customizing
`jit-lock-mode', type `C-h f jit-lock-mode <RET>'.

   In versions of Emacs before 21, different levels of decoration are
available, from slight to gaudy.  More decoration means you need to wait
more time for a buffer to be fontified (or a faster machine).  To
control how decorated your buffers should become, set the value of
`font-lock-maximum-decoration' in your `.emacs' file, with a `nil'
value indicating default (usually minimum) decoration, and a `t' value
indicating the maximum decoration.  For the gaudiest possible look,
then, include the line

     (setq font-lock-maximum-decoration t)

in your `.emacs' file.  You can also set this variable such that
different modes are highlighted in a different ways; for more
information, see the documentation for `font-lock-maximum-decoration'
with `C-h v' (or `M-x describe-variable <RET>').

   Also see the documentation for the function `font-lock-mode',
available by typing `C-h f font-lock-mode' (`M-x describe-function
<RET> font-lock-mode <RET>').

   To print buffers with the faces (i.e., colors and fonts) intact, use
`M-x ps-print-buffer-with-faces' or `M-x ps-print-region-with-faces'.
You will need a way to send text to a PostScript printer, or a
PostScript interpreter such as Ghostscript; consult the documentation
of the variables `ps-printer-name', `ps-lpr-command', and
`ps-lpr-switches' for more details.


File: efaq,  Node: Scrolling only one line,  Next: Editing MS-DOS files,  Prev: Turning on syntax highlighting,  Up: Common requests

5.48 How can I force Emacs to scroll only one line when I move past the bottom of the screen?
=============================================================================================

Customize the `scroll-conservatively' variable with `M-x
customize-variable <RET> scroll-conservatively <RET>' and set it to a
large value like, say, 10000.  For an explanation of what this means,
*note Auto Scrolling: (emacs)Auto Scrolling.

   Alternatively, use the following Lisp form in your `.emacs':

     (setq scroll-conservatively most-positive-fixnum)


File: efaq,  Node: Editing MS-DOS files,  Next: Filling paragraphs with a single space,  Prev: Scrolling only one line,  Up: Common requests

5.49 How can I edit MS-DOS files using Emacs?
=============================================

As of Emacs 20, detection and handling of MS-DOS (and Windows) files is
performed transparently.  You can open MS-DOS files on a Unix system,
edit it, and save it without having to worry about the file format.

   When editing an MS-DOS style file, the mode line will indicate that
it is a DOS file.  On Unix and GNU/Linux systems, and also on a
Macintosh, the string `(DOS)' will appear near the left edge of the
mode line; on DOS and Windows, where the DOS end-of-line (EOL) format
is the default, a backslash (`\') will appear in the mode line.

   If you are running a version of Emacs before 20.1, get `crypt++'
(*note Packages that do not come with Emacs::).  Among other things,
`crypt++' transparently modifies MS-DOS files as they are loaded and
saved, allowing you to ignore the different conventions that Unix and
MS-DOS have for delineating the end of a line.


File: efaq,  Node: Filling paragraphs with a single space,  Next: Escape sequences in shell output,  Prev: Editing MS-DOS files,  Up: Common requests

5.50 How can I tell Emacs to fill paragraphs with a single space after each period?
===================================================================================

Add the following line to your `.emacs' file:

     (setq sentence-end-double-space nil)


File: efaq,  Node: Escape sequences in shell output,  Next: Fullscreen mode on MS-Windows,  Prev: Filling paragraphs with a single space,  Up: Common requests

5.51 Why these strange escape sequences from `ls' from the Shell mode?
======================================================================

This happens because `ls' is aliased to `ls --color' in your shell init
file.  You have two alternatives to solve this:

   * Make the alias conditioned on the `EMACS' variable in the
     environment.  When Emacs runs a subsidiary shell, it exports the
     `EMACS' variable to that shell, with value equal to the absolute
     file name of Emacs.  You can unalias `ls' when that happens, thus
     limiting the alias to your interactive sessions.

   * Install the `ansi-color' package (bundled with Emacs 21.1 and
     later), which converts these ANSI escape sequences into colors.


File: efaq,  Node: Fullscreen mode on MS-Windows,  Prev: Escape sequences in shell output,  Up: Common requests

5.52 How can I start Emacs in fullscreen mode on MS-Windows?
============================================================

Use the function `w32-send-sys-command'.  For example, you can put the
following in your `.emacs' file:

     (add-hook 'term-setup-hook
               #'(lambda () (w32-send-sys-command ?\xF030)))

   To avoid the slightly distracting visual effect of Emacs starting
with its default frame size and then growing to fullscreen, you can add
an `Emacs.Geometry' entry to the Windows registry settings (see *note
(emacs)X Resources::).

   To compute the correct values for width and height, first maximize
the Emacs frame and then evaluate `(frame-height)' and `(frame-width)'
with `M-:'.


File: efaq,  Node: Bugs and problems,  Next: Compiling and installing Emacs,  Prev: Common requests,  Up: Top

6 Bugs and problems
*******************

The Emacs manual lists some common kinds of trouble users could get
into, see *note Dealing with Emacs Trouble: (emacs)Lossage, so you
might look there if the problem you encounter isn't described in this
chapter.  If you decide you've discovered a bug, see *note Reporting
Bugs: (emacs)Bugs, for instructions how to do that.

   The file `etc/PROBLEMS' in the Emacs distribution lists various
known problems with building and using Emacs on specific platforms;
type `C-h C-e' to read it.

* Menu:

* Problems with very large files::
* ^M in the shell buffer::
* Shell process exits abnormally::
* Problems with Shell Mode on MS-Windows::
* Termcap/Terminfo entries for Emacs::
* Spontaneous entry into isearch-mode::
* Problems talking to certain hosts::
* Errors with init files::
* Emacs ignores X resources::
* Emacs ignores frame parameters::
* Emacs takes a long time to visit files::
* Editing files with $ in the name::
* Shell mode loses the current directory::
* Security risks with Emacs::
* Dired claims that no file is on this line::


File: efaq,  Node: Problems with very large files,  Next: ^M in the shell buffer,  Prev: Bugs and problems,  Up: Bugs and problems

6.1 Does Emacs have problems with files larger than 8 megabytes?
================================================================

Old versions (i.e., anything before 19.29) of Emacs had problems editing
files larger than 8 megabytes.  In versions 19.29 and later, the maximum
buffer size is at least 2^27-1, or 134,217,727 bytes, or 132 MBytes.
And in Emacs 22, the maximum buffer size has been increased to
268,435,455 bytes (or 256 MBytes) on 32-bit machines.


File: efaq,  Node: ^M in the shell buffer,  Next: Shell process exits abnormally,  Prev: Problems with very large files,  Up: Bugs and problems

6.2 How do I get rid of `^M' or echoed commands in my shell buffer?
===================================================================

Try typing `M-x shell-strip-ctrl-m <RET>' while in `shell-mode' to make
them go away.  If that doesn't work, you have several options:

   For `tcsh', put this in your `.cshrc' (or `.tcshrc') file:

     if ($?EMACS) then
         if ("$EMACS" =~ /*) then
             if ($?tcsh) unset edit
             stty nl
         endif
     endif

   Or put this in your `.emacs_tcsh' or `~/.emacs.d/init_tcsh.sh' file:

     unset edit
     stty nl

   Alternatively, use `csh' in your shell buffers instead of `tcsh'.
One way is:

     (setq explicit-shell-file-name "/bin/csh")

and another is to do this in your `.cshrc' (or `.tcshrc') file:

     setenv ESHELL /bin/csh

(You must start Emacs over again with the environment variable properly
set for this to take effect.)

   You can also set the `ESHELL' environment variable in Emacs Lisp
with the following Lisp form,

     (setenv "ESHELL" "/bin/csh")

   The above solutions try to prevent the shell from producing the `^M'
characters in the first place.  If this is not possible (e.g., if you
use a Windows shell), you can get Emacs to remove these characters from
the buffer by adding this to your `.emacs' init file:

     (add-hook 'comint-output-filter-functions 'shell-strip-ctrl-m)

   On a related note: if your shell is echoing your input line in the
shell buffer, you might want to customize the `comint-process-echoes'
variable in your shell buffers, or try the following command in your
shell start-up file:

     stty -icrnl -onlcr -echo susp ^Z


File: efaq,  Node: Shell process exits abnormally,  Next: Problems with Shell Mode on MS-Windows,  Prev: ^M in the shell buffer,  Up: Bugs and problems

6.3 Why do I get "Process shell exited abnormally with code 1"?
===============================================================

The most likely reason for this message is that the `env' program is
not properly installed.  Compile this program for your architecture,
and install it with `a+x' permission in the architecture-dependent
Emacs program directory.  (You can find what this directory is at your
site by inspecting the value of the variable `exec-directory' by typing
`C-h v exec-directory <RET>'.)

   You should also check for other programs named `env' in your path
(e.g., SunOS has a program named `/usr/bin/env').  We don't understand
why this can cause a failure and don't know a general solution for
working around the problem in this case.

   The `make clean' command will remove `env' and other vital programs,
so be careful when using it.

   It has been reported that this sometimes happened when Emacs was
started as an X client from an xterm window (i.e., had a controlling
tty) but the xterm was later terminated.

   See also `PROBLEMS' (in the `etc' subdirectory of the top-level
directory when you unpack the Emacs source) for other possible causes
of this message.


File: efaq,  Node: Problems with Shell Mode on MS-Windows,  Next: Termcap/Terminfo entries for Emacs,  Prev: Shell process exits abnormally,  Up: Bugs and problems

6.4 Why do I get an error message when I try to run `M-x shell'?
================================================================

On MS-Windows, this might happen because Emacs tries to look for the
shell in a wrong place.  The default file name `/bin/sh' is usually
incorrect for non-Unix systems.  If you know where your shell
executable is, set the variable `explicit-shell-file-name' in your
`.emacs' file to point to its full file name, like this:

     (setq explicit-shell-file-name "d:/shells/bash.exe")

   If you don't know what shell does Emacs use, try the `M-!' command;
if that works, put the following line into your `.emacs':

     (setq explicit-shell-file-name shell-file-name)

   Some people have trouble with Shell Mode because of intrusive
antivirus software; disabling the resident antivirus program solves the
problems in those cases.


File: efaq,  Node: Termcap/Terminfo entries for Emacs,  Next: Spontaneous entry into isearch-mode,  Prev: Problems with Shell Mode on MS-Windows,  Up: Bugs and problems

6.5 Where is the termcap/terminfo entry for terminal type `emacs'?
==================================================================

The termcap entry for terminal type `emacs' is ordinarily put in the
`TERMCAP' environment variable of subshells.  It may help in certain
situations (e.g., using rlogin from shell buffer) to add an entry for
`emacs' to the system-wide termcap file.  Here is a correct termcap
entry for `emacs':

     emacs:tc=unknown:

   To make a terminfo entry for `emacs', use `tic' or `captoinfo'.  You
need to generate `/usr/lib/terminfo/e/emacs'.  It may work to simply
copy `/usr/lib/terminfo/d/dumb' to `/usr/lib/terminfo/e/emacs'.

   Having a termcap/terminfo entry will not enable the use of full
screen programs in shell buffers.  Use `M-x terminal-emulator' for that
instead.

   A workaround to the problem of missing termcap/terminfo entries is to
change terminal type `emacs' to type `dumb' or `unknown' in your shell
start up file.  `csh' users could put this in their `.cshrc' files:

     if ("$term" == emacs) set term=dumb


File: efaq,  Node: Spontaneous entry into isearch-mode,  Next: Problems talking to certain hosts,  Prev: Termcap/Terminfo entries for Emacs,  Up: Bugs and problems

6.6 Why does Emacs spontaneously start displaying `I-search:' and beeping?
==========================================================================

Your terminal (or something between your terminal and the computer) is
sending `C-s' and `C-q' for flow control, and Emacs is receiving these
characters and interpreting them as commands.  (The `C-s' character
normally invokes the `isearch-forward' command.)  For possible
solutions, see *note Handling C-s and C-q with flow control::.


File: efaq,  Node: Problems talking to certain hosts,  Next: Errors with init files,  Prev: Spontaneous entry into isearch-mode,  Up: Bugs and problems

6.7 Why can't Emacs talk to certain hosts (or certain hostnames)?
=================================================================

The problem may be that Emacs is linked with a wimpier version of
`gethostbyname' than the rest of the programs on the machine.  This is
often manifested as a message on startup of "X server not responding.
Check your `DISPLAY' environment variable." or a message of "Unknown
host" from `open-network-stream'.

   On a Sun, this may be because Emacs had to be linked with the static
C library.  The version of `gethostbyname' in the static C library may
only look in `/etc/hosts' and the NIS (YP) maps, while the version in
the dynamic C library may be smart enough to check DNS in addition to
or instead of NIS.  On a Motorola Delta running System V R3.6, the
version of `gethostbyname' in the standard library works, but the one
that works with NIS doesn't (the one you get with -linet).  Other
operating systems have similar problems.

   Try these options:

   * Explicitly add the host you want to communicate with to
     `/etc/hosts'.

   * Relink Emacs with this line in `src/config.h':

          #define LIBS_SYSTEM -lresolv

   * Replace `gethostbyname' and friends in `libc.a' with more useful
     versions such as the ones in `libresolv.a'.  Then relink Emacs.

   * If you are actually running NIS, make sure that `ypbind' is
     properly told to do DNS lookups with the correct command line
     switch.



File: efaq,  Node: Errors with init files,  Next: Emacs ignores X resources,  Prev: Problems talking to certain hosts,  Up: Bugs and problems

6.8 Why does Emacs say `Error in init file'?
============================================

An error occurred while loading either your `.emacs' file or the
system-wide file `lisp/default.el'.  Emacs 21.1 and later pops the
`*Messages*' buffer, and puts there some additional information about
the error, to provide some hints for debugging.

   For information on how to debug your `.emacs' file, see *note
Debugging a customization file::.

   It may be the case that you need to load some package first, or use a
hook that will be evaluated after the package is loaded.  A common case
of this is explained in *note Terminal setup code works after Emacs has
begun::.


File: efaq,  Node: Emacs ignores X resources,  Next: Emacs ignores frame parameters,  Prev: Errors with init files,  Up: Bugs and problems

6.9 Why does Emacs ignore my X resources (my .Xdefaults file)?
==============================================================

As of version 19, Emacs searches for X resources in the files specified
by the following environment variables:

   * `XFILESEARCHPATH'

   * `XUSERFILESEARCHPATH'

   * `XAPPLRESDIR'


   This emulates the functionality provided by programs written using
the Xt toolkit.

   `XFILESEARCHPATH' and `XUSERFILESEARCHPATH' should be a list of file
names separated by colons.  `XAPPLRESDIR' should be a list of directory
names separated by colons.

   Emacs searches for X resources:

  1. specified on the command line, with the `-xrm RESOURCESTRING'
     option,

  2. then in the value of the `XENVIRONMENT' environment variable,

        - or if that is unset, in the file named
          `~/.Xdefaults-HOSTNAME' if it exists (where HOSTNAME is the
          name of the machine Emacs is running on),


  3. then in the screen-specific and server-wide resource properties
     provided by the server,

        - or if those properties are unset, in the file named
          `~/.Xdefaults' if it exists,


  4. then in the files listed in `XUSERFILESEARCHPATH',

        - or in files named `LANG/Emacs' in directories listed in
          `XAPPLRESDIR' (where LANG is the value of the `LANG'
          environment variable), if the `LANG' environment variable is
          set,

        - or in files named Emacs in the directories listed in
          `XAPPLRESDIR'

        - or in `~/LANG/Emacs' (if the `LANG' environment variable is
          set),

        - or in `~/Emacs',


  5. then in the files listed in  `XFILESEARCHPATH'.



File: efaq,  Node: Emacs ignores frame parameters,  Next: Emacs takes a long time to visit files,  Prev: Emacs ignores X resources,  Up: Bugs and problems

6.10 Why don't my customizations of the frame parameters work?
==============================================================

This probably happens because you have set the frame parameters in the
variable `initial-frame-alist'.  That variable holds parameters used
only for the first frame created when Emacs starts.  To customize the
parameters of all frames, change the variable `default-frame-alist'
instead.

   These two variables exist because many users customize the initial
frame in a special way.  For example, you could determine the position
and size of the initial frame, but would like to control the geometry
of the other frames by individually positioning each one of them.


File: efaq,  Node: Emacs takes a long time to visit files,  Next: Editing files with $ in the name,  Prev: Emacs ignores frame parameters,  Up: Bugs and problems

6.11 Why does Emacs take 20 seconds to visit a file?
====================================================

Old versions of Emacs (i.e., versions before Emacs 20.x) often
encountered this when the master lock file, `!!!SuperLock!!!', has been
left in the lock directory somehow.  Delete it.

   Mark Meuer <meuer@geom.umn.edu> says that NeXT NFS has a bug where
an exclusive create succeeds but returns an error status.  This can
cause the same problem.  Since Emacs's file locking doesn't work over
NFS anyway, the best solution is to recompile Emacs with
`CLASH_DETECTION' undefined.


File: efaq,  Node: Editing files with $ in the name,  Next: Shell mode loses the current directory,  Prev: Emacs takes a long time to visit files,  Up: Bugs and problems

6.12 How do I edit a file with a `$' in its name?
=================================================

When entering a file name in the minibuffer, Emacs will attempt to
expand a `$' followed by a word as an environment variable.  To suppress
this behavior, type `$$' instead.


File: efaq,  Node: Shell mode loses the current directory,  Next: Security risks with Emacs,  Prev: Editing files with $ in the name,  Up: Bugs and problems

6.13 Why does shell mode lose track of the shell's current directory?
=====================================================================

Emacs has no way of knowing when the shell actually changes its
directory.  This is an intrinsic limitation of Unix.  So it tries to
guess by recognizing `cd' commands.  If you type `cd' followed by a
directory name with a variable reference (`cd $HOME/bin') or with a
shell metacharacter (`cd ../lib*'), Emacs will fail to correctly guess
the shell's new current directory.  A huge variety of fixes and
enhancements to shell mode for this problem have been written to handle
this problem (*note Finding a package with particular functionality::).

   You can tell Emacs the shell's current directory with the command
`M-x dirs'.


File: efaq,  Node: Security risks with Emacs,  Next: Dired claims that no file is on this line,  Prev: Shell mode loses the current directory,  Up: Bugs and problems

6.14 Are there any security risks in Emacs?
===========================================

   * The `movemail' incident.  (No, this is not a risk.)

     In his book `The Cuckoo's Egg', Cliff Stoll describes this in
     chapter 4.  The site at LBL had installed the `/etc/movemail'
     program setuid root.  (As of version 19, `movemail' is in your
     architecture-specific directory; type `C-h v exec-directory <RET>'
     to see what it is.)  Since `movemail' had not been designed for
     this situation, a security hole was created and users could get
     root privileges.

     `movemail' has since been changed so that this security hole will
     not exist, even if it is installed setuid root.  However,
     `movemail' no longer needs to be installed setuid root, which
     should eliminate this particular risk.

     We have heard unverified reports that the 1988 Internet worm took
     advantage of this configuration problem.

   * The `file-local-variable' feature.  (Yes, a risk, but easy to
     change.)

     There is an Emacs feature that allows the setting of local values
     for variables when editing a file by including specially formatted
     text near the end of the file.  This feature also includes the
     ability to have arbitrary Emacs Lisp code evaluated when the file
     is visited.  Obviously, there is a potential for Trojan horses to
     exploit this feature.

     As of Emacs 22, Emacs has a list of local variables that are known
     to be safe to set.  If a file tries to set any variable outside
     this list, it asks the user to confirm whether the variables
     should be set.  You can also tell Emacs whether to allow the
     evaluation of Emacs Lisp code found at the bottom of files by
     setting the variable `enable-local-eval'.

     For more information, *note File Variables: (emacs)File Variables.

   * Synthetic X events.  (Yes, a risk; use `MIT-MAGIC-COOKIE-1' or
     better.)

     Emacs accepts synthetic X events generated by the `SendEvent'
     request as though they were regular events.  As a result, if you
     are using the trivial host-based authentication, other users who
     can open X connections to your X workstation can make your Emacs
     process do anything, including run other processes with your
     privileges.

     The only fix for this is to prevent other users from being able to
     open X connections.  The standard way to prevent this is to use a
     real authentication mechanism, such as `MIT-MAGIC-COOKIE-1'.  If
     using the `xauth' program has any effect, then you are probably
     using `MIT-MAGIC-COOKIE-1'.  Your site may be using a superior
     authentication method; ask your system administrator.

     If real authentication is not a possibility, you may be satisfied
     by just allowing hosts access for brief intervals while you start
     your X programs, then removing the access.  This reduces the risk
     somewhat by narrowing the time window when hostile users would
     have access, but _does not eliminate the risk_.

     On most computers running Unix and X, you enable and disable
     access using the `xhost' command.  To allow all hosts access to
     your X server, use

          xhost +

     at the shell prompt, which (on an HP machine, at least) produces
     the following message:

          access control disabled, clients can connect from any host

     To deny all hosts access to your X server (except those explicitly
     allowed by name), use

          xhost -

     On the test HP computer, this command generated the following
     message:

          access control enabled, only authorized clients can connect



File: efaq,  Node: Dired claims that no file is on this line,  Prev: Security risks with Emacs,  Up: Bugs and problems

6.15 Dired says, `no file on this line' when I try to do something.
===================================================================

Chances are you're using a localized version of Unix that doesn't use US
date format in dired listings.  You can check this by looking at dired
listings or by typing `ls -l' to a shell and looking at the dates that
come out.

   Dired uses a regular expression to find the beginning of a file name.
In a long Unix-style directory listing (`ls -l'), the file name starts
after the date.  The regexp has thus been written to look for the date,
the format of which can vary on non-US systems.

   There are two approaches to solving this.  The first one involves
setting things up so that `ls -l' outputs US date format.  This can be
done by setting the locale.  See your OS manual for more information.

   The second approach involves changing the regular expression used by
dired, `directory-listing-before-filename-regexp'.


File: efaq,  Node: Compiling and installing Emacs,  Next: Finding Emacs and related packages,  Prev: Bugs and problems,  Up: Top

7 Compiling and installing Emacs
********************************

* Menu:

* Installing Emacs::
* Updating Emacs::
* Problems building Emacs::
* Linking with -lX11 fails::


File: efaq,  Node: Installing Emacs,  Next: Updating Emacs,  Prev: Compiling and installing Emacs,  Up: Compiling and installing Emacs

7.1 How do I install Emacs?
===========================

This answer is meant for users of Unix and Unix-like systems.  Users of
other operating systems should see the series of questions beginning
with *note Emacs for MS-DOS::, which describe where to get non-Unix
source and binaries, and how to install Emacs on those systems.

   For Unix and Unix-like systems, the easiest way is often to compile
it from scratch.  You will need:

   * Emacs sources.  *Note Current GNU distributions::, for a list of
     ftp sites that make them available.  On `ftp.gnu.org', the main GNU
     distribution site, sources are available as

     `ftp://ftp.gnu.org/pub/gnu/emacs/emacs-22.1.tar.gz'

     The above will obviously change as new versions of Emacs come out.
     For instance, when Emacs 22.42 is released, it will most probably
     be available as

     `ftp://ftp.gnu.org/pub/gnu/emacs/emacs-22.42.tar.gz'

     Again, you should use one of the GNU mirror sites (see *note
     Current GNU distributions::, and adjust the URL accordingly) so as
     to reduce load on `ftp.gnu.org'.

   * `gzip', the GNU compression utility.  You can get `gzip' via
     anonymous ftp at mirrors of `ftp.gnu.org' sites; it should compile
     and install without much trouble on most systems.  Once you have
     retrieved the Emacs sources, you will probably be able to
     uncompress them with the command

          gunzip --verbose emacs-22.1.tar.gz

     changing the Emacs version (22.1), as necessary.  Once `gunzip'
     has finished doing its job, a file by the name of `emacs-22.1.tar'
     should be in your build directory.

   * `tar', the "tape archiving" program, which moves multiple files
     into and out of archive files, or "tarfiles".  All of the files
     comprising the Emacs source come in a single tarfile, and must be
     extracted using `tar' before you can build Emacs.  Typically, the
     extraction command would look like

          tar -xvvf emacs-22.1.tar

     The `x' indicates that we want to extract files from this tarfile,
     the two `v's force verbose output, and the `f' tells `tar' to use
     a disk file, rather than one on the tape drive.

     If you're using GNU `tar' (available at mirrors of `ftp.gnu.org'),
     you can combine this step and the previous one by using the command

          tar -zxvvf emacs-22.1.tar.gz

     The additional `z' at the beginning of the options list tells GNU
     `tar' to uncompress the file with `gunzip' before extracting the
     tarfile's components.


   At this point, the Emacs sources (all 70+ megabytes of them) should
be sitting in a directory called `emacs-22.1'.  On most common Unix and
Unix-like systems, you should be able to compile Emacs (with X Window
system support) with the following commands:

     cd emacs-22.1       # change directory to emacs-22.1
     ./configure         # configure Emacs for your particular system
     make                # use Makefile to build components, then Emacs

   If the `make' completes successfully, the odds are fairly good that
the build has gone well.  (*Note Problems building Emacs::, if you
weren't successful.)

   By default, Emacs is installed in the following directories:

`/usr/local/bin'
     binaries.

`/usr/local/share/emacs/22.1'
     Lisp code and support files.

`/usr/local/info'
     Info documentation.

   To install files in those default directories, become the superuser
and type

     make install

   Note that `make install' will overwrite `/usr/local/bin/emacs' and
any Emacs Info files that might be in `/usr/local/info'.

   Much more verbose instructions (with many more hints and suggestions)
come with the Emacs sources, in the file `INSTALL'.


File: efaq,  Node: Updating Emacs,  Next: Problems building Emacs,  Prev: Installing Emacs,  Up: Compiling and installing Emacs

7.2 How do I update Emacs to the latest version?
================================================

*Note Installing Emacs::, and follow the instructions there for
installation.

   Most files are placed in version-specific directories.  Emacs 22.1,
for instance, places files in `/usr/local/share/emacs/22.1'.

   Upgrading should overwrite only, `/usr/local/bin/emacs' (the Emacs
binary) and documentation in `/usr/local/info'.  Back up these files
before you upgrade, and you shouldn't have too much trouble.


File: efaq,  Node: Problems building Emacs,  Next: Linking with -lX11 fails,  Prev: Updating Emacs,  Up: Compiling and installing Emacs

7.3 What should I do if I have trouble building Emacs?
======================================================

First look in the file `etc/PROBLEMS' (where you unpack the Emacs
source) to see if there is already a solution for your problem.  Next,
look for other questions in this FAQ that have to do with Emacs
installation and compilation problems.

   If you'd like to have someone look at your problem and help solve it,
see *note Help installing Emacs::.

   If you cannot find a solution in the documentation, send a message to
<bug-gnu-emacs@gnu.org>.

   Please don't post it to `news:gnu.emacs.help' or send e-mail to
<help-gnu-emacs@gnu.org>.  For further guidelines, see *note Guidelines
for newsgroup postings:: and *note Reporting bugs::.


File: efaq,  Node: Linking with -lX11 fails,  Prev: Problems building Emacs,  Up: Compiling and installing Emacs

7.4 Why does linking Emacs with -lX11 fail?
===========================================

Emacs needs to be linked with the static version of the X11 library,
`libX11.a'.  This may be missing.

   On OpenWindows, you may need to use `add_services' to add the
"OpenWindows Programmers" optional software category from the CD-ROM.

   On HP-UX 8.0, you may need to run `update' again to load the X11-PRG
"fileset."  This may be missing even if you specified "all filesets"
the first time.  If `libcurses.a' is missing, you may need to load the
"Berkeley Development Option."

   David Zuhn <zoo@armadillo.com> says that MIT X builds shared
libraries by default, and only shared libraries, on those platforms that
support them.  These shared libraries can't be used when undumping
`temacs' (the last stage of the Emacs build process).  To get regular
libraries in addition to shared libraries, add this to `site.cf':

     #define ForceNormalLib YES

   Other systems may have similar problems.  You can always define
`CANNOT_DUMP' and link with the shared libraries instead.

   To get the Xmenu stuff to work, you need to find a copy of MIT's
`liboldX.a'.


File: efaq,  Node: Finding Emacs and related packages,  Next: Major packages and programs,  Prev: Compiling and installing Emacs,  Up: Top

8 Finding Emacs and related packages
************************************

* Menu:

* Finding Emacs on the Internet::
* Finding a package with particular functionality::
* Packages that do not come with Emacs::
* Current GNU distributions::
* Difference between Emacs and XEmacs::
* Emacs for MS-DOS::
* Emacs for Windows::
* Emacs for OS/2::
* Emacs for Atari ST::
* Emacs for the Amiga ::
* Emacs for NeXTSTEP::
* Emacs for Apple computers::
* Emacs for VMS and DECwindows::
* Modes for various languages::


File: efaq,  Node: Finding Emacs on the Internet,  Next: Finding a package with particular functionality,  Prev: Finding Emacs and related packages,  Up: Finding Emacs and related packages

8.1 Where can I get Emacs on the net (or by snail mail)?
========================================================

Look in the files `etc/DISTRIB' and `etc/FTP' for information on nearby
archive sites.  If you don't already have Emacs, see *note
Informational files for Emacs::, for how to get these files.

   *Note Installing Emacs::, for information on how to obtain and build
the latest version of Emacs, and see *note Current GNU distributions::,
for a list of archive sites that make GNU software available.


File: efaq,  Node: Finding a package with particular functionality,  Next: Packages that do not come with Emacs,  Prev: Finding Emacs on the Internet,  Up: Finding Emacs and related packages

8.2 How do I find a Emacs Lisp package that does XXX?
=====================================================

First of all, you should check to make sure that the package isn't
already available.  For example, typing `M-x apropos <RET> wordstar
<RET>' lists all functions and variables containing the string
`wordstar'.

   It is also possible that the package is on your system, but has not
been loaded.  To see which packages are available for loading, look
through your computer's lisp directory (*note File-name conventions::).
The Lisp source to most packages contains a short description of how
they should be loaded, invoked, and configured--so before you use or
modify a Lisp package, see if the author has provided any hints in the
source code.

   The command `C-h p' (`finder-by-keyword') allows you to browse the
constituent Emacs packages.

   For advice on how to find extra packages that are not part of Emacs,
see *note Packages that do not come with Emacs::.


File: efaq,  Node: Packages that do not come with Emacs,  Next: Current GNU distributions,  Prev: Finding a package with particular functionality,  Up: Finding Emacs and related packages

8.3 Where can I get Emacs Lisp packages that don't come with Emacs?
===================================================================

The Emacs Lisp List (ELL)
(http://www.anc.ed.ac.uk/~stephen/emacs/ell.html), maintained by
Stephen Eglen <stephen@anc.ed.ac.uk>, aims to provide one compact list
with links to all of the current Emacs Lisp files on the Internet.  The
ELL can be browsed over the web, or from Emacs with the `ell' package
(http://www.anc.ed.ac.uk/~stephen/emacs/ell.el).

   Many authors post their packages to the Emacs sources newsgroup
(news:gnu.emacs.sources).  You can search the archives of this group
with Google (http://groups.google.com/group/gnu.emacs.sources), or
Gmane (http://dir.gmane.org/gmane.emacs.sources), for example.

   Several packages are stored in the Lisp area of the Emacs Wiki
(http://emacswiki.org/elisp/).

   For a long time, the Emacs Lisp Archive provided a central repository
for Emacs packages.  Sadly, it has not been active for some time,
although you can still access the old files at

   `http://www.club.cc.cmu.edu/pub/gnu/elisp-archive/'

   Read the file `etc/MORE.STUFF' for more information about external
packages.


File: efaq,  Node: Current GNU distributions,  Next: Difference between Emacs and XEmacs,  Prev: Packages that do not come with Emacs,  Up: Finding Emacs and related packages

8.4 Where can I get other up-to-date GNU stuff?
===============================================

The most up-to-date official GNU software is normally kept at

   `ftp://ftp.gnu.org/pub/gnu'

   Read the files `etc/DISTRIB' and `etc/FTP' for more information.

   A list of sites mirroring `ftp.gnu.org' can be found at

   `http://www.gnu.org/order/ftp.html'


File: efaq,  Node: Difference between Emacs and XEmacs,  Next: Emacs for MS-DOS,  Prev: Current GNU distributions,  Up: Finding Emacs and related packages

8.5 What is the difference between Emacs and XEmacs (formerly Lucid Emacs)?
===========================================================================

XEmacs is a branch version of Emacs.  It was first called Lucid Emacs,
and was initially derived from a prerelease version of Emacs 19.  In
this FAQ, we use the name "Emacs" only for the official version.

   Emacs and XEmacs each come with Lisp packages that are lacking in the
other.  The two versions have some significant differences at the Lisp
programming level.  Their current features are roughly comparable,
though the support for some operating systems, character sets and
specific packages might be quite different.

   Some XEmacs code has been contributed to Emacs, and we would like to
use other parts, but the earlier XEmacs maintainers did not always keep
track of the authors of contributed code, which makes it impossible for
the FSF to get copyright papers signed for that code.  (The FSF
requires these papers for all the code included in the Emacs release,
aside from generic C support packages that retain their separate
identity and are not integrated into the code of Emacs proper.)

   If you want to talk about these two versions and distinguish them,
please call them "Emacs" and "XEmacs."  To contrast "XEmacs" with "GNU
Emacs" would be misleading, since XEmacs too has its origin in the work
of the GNU Project.  Terms such as "Emacsen" and "(X)Emacs" are not
wrong, but they are not very clear, so it is better to write "Emacs and
XEmacs."


File: efaq,  Node: Emacs for MS-DOS,  Next: Emacs for Windows,  Prev: Difference between Emacs and XEmacs,  Up: Finding Emacs and related packages

8.6 Where can I get Emacs for my PC running MS-DOS?
===================================================

A pre-built binary distribution of Emacs is available from the
SimTel.NET archives.  This version apparently works under MS-DOS and
Windows (3.X, 9X, ME, NT, and 2000) and supports long file names under
Windows 9X, Windows ME, and Windows 2000.  More information is available
from

   `ftp://ftp.delorie.com/pub/djgpp/current/v2gnu/emacs.README'

   The binary itself is available in the files `em*.zip' in the
directory

   `ftp://ftp.delorie.com/pub/djgpp/current/v2gnu/'

   If you prefer to compile Emacs for yourself, you can do so with the
current distribution directly.  You will need a 386 (or better)
processor, and to be running MS-DOS 3.0 or later.  According to Eli
Zaretskii <eliz@gnu.org> and Darrel Hankerson <hankedr@dms.auburn.edu>,
you will need the following:

_Compiler_
     DJGPP version 1.12 maint 1 or later.  Djgpp 2.0 or later is
     recommended, since 1.x is very old an unmaintained.  Djgpp 2
     supports long file names on Windows 9X/ME/2K.

     You can get the latest release of DJGPP by retrieving all of the
     files in

     `ftp://ftp.delorie.com/pub/djgpp/current/v2*'

_Unpacking program_
     The easiest way is to use `djtar' which comes with DJGPP v2.x,
     because it can open gzip'ed tarfiles (i.e., those ending with
     `.tar.gz') in one step.  `Djtar' comes in `djdevNNN.zip' archive
     (where NNN is the DJGPP version number), from the URL mentioned
     above.

     *Warning!*  Do *not* use the popular WinZip program to unpack the
     Emacs distribution!  WinZip is known to corrupt some of the files
     by converting them to the DOS CR-LF format, it doesn't always
     preserve the directory structure recorded in the compressed Emacs
     archive, and commits other atrocities.  Some of these problems
     could actually prevent Emacs from building successfully!

_make, mv, sed, and rm_
     All of these utilities are available at

     `ftp://ftp.delorie.com/pub/djgpp/current/v2gnu'

     16-bit utilities can be found in GNUish, at

     `http://www.simtel.net/pub/gnuish/'

     (`mv' and `rm' are in the Fileutils package, `sed' and `make' are
     each one in a separate package named after them.)


   The files `INSTALL' (near its end) and `etc/PROBLEMS' in the
directory of the Emacs sources contains some additional information
regarding Emacs under MS-DOS.

   For a list of other MS-DOS implementations of Emacs (and Emacs
look-alikes), consult the list of "Emacs implementations and
literature," available at

   `ftp://rtfm.mit.edu/pub/usenet/comp.emacs/'

   Note that while many of these programs look similar to Emacs, they
often lack certain features, such as the Emacs Lisp extension language.


File: efaq,  Node: Emacs for Windows,  Next: Emacs for OS/2,  Prev: Emacs for MS-DOS,  Up: Finding Emacs and related packages

8.7 Where can I get Emacs for Microsoft Windows?
================================================

For information on Emacs for Windows 95 and NT, read the FAQ produced by
Geoff Voelker <voelker@cs.washington.edu> and currently maintained by
Ramprasad B <ramprasad@gnu.org>, available at

   `http://www.gnu.org/software/emacs/windows/ntemacs.html'

   *Note Emacs for MS-DOS::, for Windows 3.1.

   A port of Emacs 20.7 for Windows CE, based on NTEmacs, is available
at

   `http://www.rainer-keuchel.de/software.html'

This port was done by Rainer Keuchel <coyxc@rainer-keuchel.de>, and
supports all Emacs features except async subprocesses and menus.  You
will need MSVC 6.0 and a Windows CE SDK to build this port.


File: efaq,  Node: Emacs for OS/2,  Next: Emacs for Atari ST,  Prev: Emacs for Windows,  Up: Finding Emacs and related packages

8.8 Where can I get Emacs for my PC running OS/2?
=================================================

Emacs 20.6 is ported for emx on OS/2 2.0 or 2.1, and is available at

   `ftp://hobbes.nmsu.edu/pub/os2/apps/editors/emacs/'

and also at

   `http://www.dotemacs.de/os2/emacs.html'

   Instructions for installation, basic setup, and other useful
information for OS/2 users of Emacs can be found at

   `http://home.snafu.de/ohei/emacs/emacs206-os2.html'


File: efaq,  Node: Emacs for Atari ST,  Next: Emacs for the Amiga,  Prev: Emacs for OS/2,  Up: Finding Emacs and related packages

8.9 Where can I get Emacs for my Atari ST?
==========================================

Roland Scha"uble reports that Emacs 18.58 running on plain TOS and MiNT
is available at
`ftp://atari.archive.umich.edu/Editors/Emacs-18-58/1858b-d3.zoo'.


File: efaq,  Node: Emacs for the Amiga,  Next: Emacs for NeXTSTEP,  Prev: Emacs for Atari ST,  Up: Finding Emacs and related packages

8.10 Where can I get Emacs for my Amiga?
========================================

The files you need are available at

   `ftp://ftp.wustl.edu/pub/aminet/util/gnu/'

   David Gilbert <dgilbert@gamiga.guelphnet.dweomer.org> has released a
beta version of Emacs 19.25 for the Amiga.  You can get the binary at

   `ftp://ftp.wustl.edu/pub/aminet/util/gnu/a2.0bEmacs-bin.lha'


File: efaq,  Node: Emacs for NeXTSTEP,  Next: Emacs for Apple computers,  Prev: Emacs for the Amiga,  Up: Finding Emacs and related packages

8.11 Where can I get Emacs for NeXTSTEP?
========================================

Emacs.app is a NeXTSTEP version of Emacs 19.34 which supports colors,
menus, and multiple frames.  You can get it from

`ftp://next-ftp.peak.org/pub/next-ftp/next/apps/emacs/Emacs_for_NeXTstep.4.20a1.NIHS.b.tar.gz'


File: efaq,  Node: Emacs for Apple computers,  Next: Emacs for VMS and DECwindows,  Prev: Emacs for NeXTSTEP,  Up: Finding Emacs and related packages

8.12 Where can I get Emacs for my Apple computer?
=================================================

Beginning with version 21.1, the Macintosh is supported in the official
Emacs distribution; see the files `mac/README' and `mac/INSTALL' in the
Emacs distribution for build instructions.

   Beginning with version 22.1, Emacs supports Mac OS X natively.


File: efaq,  Node: Emacs for VMS and DECwindows,  Next: Modes for various languages,  Prev: Emacs for Apple computers,  Up: Finding Emacs and related packages

8.13 Where do I get Emacs that runs on VMS under DECwindows?
============================================================

Up-to-date information about GNU software (including Emacs) for VMS is
available at `http://www.lp.se/gnu-vms/'.


File: efaq,  Node: Modes for various languages,  Prev: Emacs for VMS and DECwindows,  Up: Finding Emacs and related packages

8.14 Where can I get modes for Lex, Yacc/Bison, Bourne shell, csh, C++, Objective-C, Pascal, Java, and Awk?
===========================================================================================================

Most of these modes are now available in standard Emacs distribution.
To get additional modes, see *note Finding a package with particular
functionality::.

   Barry Warsaw's `cc-mode' now works for C, C++, Objective-C, and Java
code.  It is distributed with Emacs, but has its own homepage
(http://cc-mode.sourceforge.net/).


File: efaq,  Node: Major packages and programs,  Next: Key bindings,  Prev: Finding Emacs and related packages,  Up: Top

9 Major packages and programs
*****************************

* Menu:

* VM::
* Supercite::
* Calc::
* VIPER::
* AUCTeX::
* BBDB::
* Ispell::
* Emacs/W3::
* EDB::
* Mailcrypt::
* JDE::
* Patch::


File: efaq,  Node: VM,  Next: Supercite,  Prev: Major packages and programs,  Up: Major packages and programs

9.1 VM (View Mail) -- another mail reader within Emacs, with MIME support
=========================================================================

Author
     Kyle Jones <kyle_jones@wonderworks.com>

Latest version
     7.19

Distribution
     `ftp://ftp.wonderworks.com/pub/vm/vm.tar.gz'

Informational newsgroup
     `news:gnu.emacs.vm.info'
Bug reports newsgroup
     `news:gnu.emacs.vm.bug'
     Or send reports to <bug-vm@wonderworks.com>

   VM 7 works well with Emacs 21 and Emacs 22. Older versions of VM
suitable for use with older versions of Emacs are available from the
same FTP site (ftp://ftp.wonderworks.com/pub/vm/).


File: efaq,  Node: Supercite,  Next: Calc,  Prev: VM,  Up: Major packages and programs

9.2 Supercite -- mail and news citation package within Emacs
============================================================

Author
     Barry Warsaw <barry@python.org>

Latest version
     3.54 (comes bundled with Emacs since version 20)

Distribution
     `http://www.python.org/emacs/supercite.tar.gz'

Mailing list
     Subscription requests to <supercite-request@python.org>
     Submissions <supercite@python.org>


   Superyank is an old version of Supercite.


File: efaq,  Node: Calc,  Next: VIPER,  Prev: Supercite,  Up: Major packages and programs

9.3 Calc -- poor man's Mathematica within Emacs
===============================================

Author
     Dave Gillespie <daveg@csvax.cs.caltech.edu>

Latest version
     2.1 (part of Emacs since version 22.1)

Distribution
     No separate distribution outside of Emacs.  Older versions are
     available at `ftp://ftp.gnu.org/pub/gnu/calc/'.


   Note that Calc 2.02f needs patching to work with Emacs 21 and later.

   Emacs 21.1 and later comes with a package called `calculator.el'.
It doesn't support all the mathematical wizardry offered by Calc, such
as matrices, special functions, and statistics, but is more than
adequate as a replacement for `xcalc' and similar programs.


File: efaq,  Node: VIPER,  Next: AUCTeX,  Prev: Calc,  Up: Major packages and programs

9.4 VIPER -- `vi' emulation for Emacs
=====================================

Since Emacs 19.29, the preferred `vi' emulation in Emacs is VIPER (`M-x
viper-mode <RET>'), which comes with Emacs.  It extends and supersedes
VIP (including VIP 4.3) and provides `vi' emulation at several levels,
from one that closely follows `vi' to one that departs from `vi' in
several significant ways.

   For Emacs 19.28 and earlier, the following version of VIP is
generally better than the one distributed with Emacs:

Author
     Aamod Sane <sane@cs.uiuc.edu>

Latest version
     4.3

Distribution
     `ftp://www.club.cc.cmu.edu/pub/gnu/elisp-archive/modes/vip-mode.tar.Z'



File: efaq,  Node: AUCTeX,  Next: BBDB,  Prev: VIPER,  Up: Major packages and programs

9.5 AUCTeX -- enhanced TeX modes with debugging facilities
==========================================================

AUCTeX is a set of sophisticated major modes for TeX, LaTeX, ConTeXt,
and Texinfo offering context-sensitive syntax highlighting,
indentation, formatting and folding, macro completion, TeX shell
functionality, and debugging.  Be also sure to check out *note RefTeX:
(reftex)Introduction.  Current versions of AUCTeX include the
preview-latex (http://www.gnu.org/software/auctex/preview-latex)
package for WYSIWYG previews of various LaTeX constructs in the Emacs
source buffer.

Authors
     Kresten Krab Thorup <krab@iesd.auc.dk>,
     Per Abrahamsen <abraham@dina.kvl.dk>,
     and others.

Maintainer
     David Kastrup <dak@gnu.org>

Latest version
     11.84

Distribution
     `ftp://ftp.gnu.org/pub/gnu/auctex/'

Web site
     `http://www.gnu.org/software/auctex/'

Mailing list:
     Subscription requests to <auctex-request@gnu.org>
     Submissions to <auctex@gnu.org>



File: efaq,  Node: BBDB,  Next: Ispell,  Prev: AUCTeX,  Up: Major packages and programs

9.6 BBDB -- personal Info Rolodex integrated with mail/news readers
===================================================================

Maintainer
     Ronan Waide <waider@waider.ie>

Latest version
     2.34

Distribution
     `http://bbdb.sourceforge.net/'

Mailing lists
     Subscription requests to <bbdb-info-request@lists.sourceforge.net>
     Submissions to <bbdb-info@lists.sourceforge.net>
     Release announcements:
     <bbdb-announce-request@lists.sourceforge.net>



File: efaq,  Node: Ispell,  Next: Emacs/W3,  Prev: BBDB,  Up: Major packages and programs

9.7 Ispell -- spell checker in C with interface for Emacs
=========================================================

Author
     Geoff Kuenning <geoff@cs.hmc.edu>

Latest version
     3.3.02

Distribution
     `http://fmg-www.cs.ucla.edu/geoff/tars/ispell-3.3.02.tar.gz'
Web site
     `http://fmg-www.cs.ucla.edu/geoff/ispell.html'


   This Ispell program is distinct from GNU Ispell 4.0. GNU Ispell 4.0
is no longer a supported product.


File: efaq,  Node: Emacs/W3,  Next: EDB,  Prev: Ispell,  Up: Major packages and programs

9.8 Emacs/W3 -- A World Wide Web browser inside of Emacs
========================================================

Author
     Bill Perry <wmperry@gnu.org>

Maintainer
     Emacs/W3 needs a maintainer. It has lain dormant for several
     years. If you would like to take over the project, please contact
     <maintainers@gnu.org>.

Latest version
     4.0pre.47

Distribution
     `http://savannah.gnu.org/projects/w3'

Mailing lists
     Receive announcements from <w3-announce@gnu.org>
     Help to develop Emacs/W3 at <w3-dev@gnu.org>



File: efaq,  Node: EDB,  Next: Mailcrypt,  Prev: Emacs/W3,  Up: Major packages and programs

9.9 EDB -- Database program for Emacs; replaces forms editing modes
===================================================================

Author
     Michael Ernst <mernst@theory.lcs.mit.edu>

Latest version
     1.21

Distribution
     `ftp://theory.lcs.mit.edu/pub/emacs/edb'



File: efaq,  Node: Mailcrypt,  Next: JDE,  Prev: EDB,  Up: Major packages and programs

9.10 Mailcrypt -- PGP interface within Emacs mail and news
==========================================================

Authors
     Patrick J. LoPresti <patl@lcs.mit.edu> and Jin S. Choi
     <jin@atype.com>

Maintainer
     Brian Warner <warner-mailcrypt@lothar.com>

Latest version
     3.5.8

Distribution
     `http://dl.sourceforge.net/sourceforge/mailcrypt/mailcrypt-3.5.8.tar.gz'

Web site
     `http://mailcrypt.sourceforge.net/'


   Note that a new package called PGG is bundled with Emacs starting
with version 22.1.  It is a modern interface to various PGP
implementations, including The GNU Privacy Guard
(http://www.gnupg.org/) and supports symmetric encryption.


File: efaq,  Node: JDE,  Next: Patch,  Prev: Mailcrypt,  Up: Major packages and programs

9.11 JDE -- Integrated development environment for Java
=======================================================

Author
     Paul Kinnucan <paulk@mathworks.com>

Latest version
     2.3.5

Web site
     `http://jdee.sunsite.dk/'

Mailing lists
     Subscription requests to <jde-subscribe@sunsite.dk>
     Receive announcements from <jde-announce-subscribe@sunsite.dk>



File: efaq,  Node: Patch,  Prev: JDE,  Up: Major packages and programs

9.12 Patch -- program to apply "diffs" for updating files
=========================================================

Author
     Larry Wall <lwall@wall.org> (with GNU modifications)

Latest version
     2.5.4

Distribution
     *Note Current GNU distributions::.



File: efaq,  Node: Key bindings,  Next: Alternate character sets,  Prev: Major packages and programs,  Up: Top

10 Key bindings
***************

* Menu:

* Binding keys to commands::
* Invalid prefix characters::
* Terminal setup code works after Emacs has begun::
* Using function keys under X::
* Working with function and arrow keys::
* X key translations for Emacs::
* Handling C-s and C-q with flow control::
* Binding C-s and C-q::
* Backspace invokes help::
* stty and Backspace key::
* Swapping keys::
* Producing C-XXX with the keyboard::
* No Meta key::
* No Escape key::
* Compose Character::
* Binding combinations of modifiers and function keys::
* Meta key does not work in xterm::
* ExtendChar key does not work as Meta::
* SPC no longer completes file names::


File: efaq,  Node: Binding keys to commands,  Next: Invalid prefix characters,  Prev: Key bindings,  Up: Key bindings

10.1 How do I bind keys (including function keys) to commands?
==============================================================

Keys can be bound to commands either interactively or in your `.emacs'
file.  To interactively bind keys for all modes, type `M-x
global-set-key <RET> KEY CMD <RET>'.

   To bind a key just in the current major mode, type `M-x
local-set-key <RET> KEY CMD <RET>'.

   *note Key Bindings: (emacs)Key Bindings, for further details.

   To make the process of binding keys interactively easier, use the
following "trick": First bind the key interactively, then immediately
type `C-x <ESC> <ESC> C-a C-k C-g'.  Now, the command needed to bind
the key is in the kill ring, and can be yanked into your `.emacs' file.
If the key binding is global, no changes to the command are required.
For example,

     (global-set-key (quote [f1]) (quote help-for-help))

can be placed directly into the `.emacs' file.  If the key binding is
local, the command is used in conjunction with the `add-hook' function.
For example, in TeX mode, a local binding might be

     (add-hook 'tex-mode-hook
       (lambda ()
        (local-set-key (quote [f1]) (quote help-for-help))))

   * Control characters in key sequences, in the form yanked from the
     kill ring are given in their graphic form--i.e., <CTRL> is shown as
     `^', <TAB> as a set of spaces (usually 8), etc.  You may want to
     convert these into their vector or string forms.

   * If a prefix key of the character sequence to be bound is already
     bound as a complete key, then you must unbind it before the new
     binding.  For example, if `ESC {' is previously bound:

          (global-unset-key [?\e ?{])   ;;   or
          (local-unset-key [?\e ?{])

   * Aside from commands and "lambda lists," a vector or string also
     can be bound to a key and thus treated as a macro.  For example:

          (global-set-key [f10] [?\C-x?\e?\e?\C-a?\C-k?\C-g])  ;;  or
          (global-set-key [f10] "\C-x\e\e\C-a\C-k\C-g")



File: efaq,  Node: Invalid prefix characters,  Next: Terminal setup code works after Emacs has begun,  Prev: Binding keys to commands,  Up: Key bindings

10.2 Why does Emacs say `Key sequence XXX uses invalid prefix characters'?
==========================================================================

Usually, one of two things has happened.  In one case, the control
character in the key sequence has been misspecified (e.g. `C-f' used
instead of `\C-f' within a Lisp expression).  In the other case, a
"prefix key" in the keystroke sequence you were trying to bind was
already bound as a "complete key".  Historically, the `ESC [' prefix
was usually the problem, in which case you should evaluate either of
these forms before attempting to bind the key sequence:

     (global-unset-key [?\e ?[])  ;;  or
     (global-unset-key "\e[")


File: efaq,  Node: Terminal setup code works after Emacs has begun,  Next: Using function keys under X,  Prev: Invalid prefix characters,  Up: Key bindings

10.3 Why doesn't this [terminal or window-system setup] code work in my `.emacs' file, but it works just fine after Emacs starts up?
====================================================================================================================================

During startup, Emacs initializes itself according to a given code/file
order.  If some of the code executed in your `.emacs' file needs to be
postponed until the initial terminal or window-system setup code has
been executed but is not, then you will experience this problem (this
code/file execution order is not enforced after startup).

   To postpone the execution of Emacs Lisp code until after terminal or
window-system setup, treat the code as a "lambda list" and set the
value of either the `term-setup-hook' or `window-setup-hook' variable
to this lambda function.  For example,

     (add-hook 'term-setup-hook
               (lambda ()
                (when (string-match "\\`vt220" (or (getenv "TERM") ""))
                  ;; Make vt220's "Do" key behave like M-x:
                  (global-set-key [do] 'execute-extended-command))))

   For information on what Emacs does every time it is started, see the
`lisp/startup.el' file.


File: efaq,  Node: Using function keys under X,  Next: Working with function and arrow keys,  Prev: Terminal setup code works after Emacs has begun,  Up: Key bindings

10.4 How do I use function keys under X?
========================================

With Emacs 19, functions keys under X are bound like any other key.
*Note Binding keys to commands::, for details.


File: efaq,  Node: Working with function and arrow keys,  Next: X key translations for Emacs,  Prev: Using function keys under X,  Up: Key bindings

10.5 How do I tell what characters or symbols my function or arrow keys emit?
=============================================================================

Type `C-h c' then the function or arrow keys.  The command will return
either a function key symbol or character sequence (see the Emacs
on-line documentation for an explanation).  This works for other keys
as well.


File: efaq,  Node: X key translations for Emacs,  Next: Handling C-s and C-q with flow control,  Prev: Working with function and arrow keys,  Up: Key bindings

10.6 How do I set the X key "translations" for Emacs?
=====================================================

Emacs is not written using the Xt library by default, so there are no
"translations" to be set.  (We aren't sure how to set such translations
if you do build Emacs with Xt; please let us know if you've done this!)

   The only way to affect the behavior of keys within Emacs is through
`xmodmap' (outside Emacs) or `define-key' (inside Emacs).  The
`define-key' command should be used in conjunction with the
`function-key-map' map.  For instance,

     (define-key function-key-map [M-<TAB>] [?\M-\t])

defines the `M-<TAB>' key sequence.


File: efaq,  Node: Handling C-s and C-q with flow control,  Next: Binding C-s and C-q,  Prev: X key translations for Emacs,  Up: Key bindings

10.7 How do I handle `C-s' and `C-q' being used for flow control?
=================================================================

`C-s' and `C-q' are used in the XON/XOFF flow control protocol.  This
messes things up when you're using Emacs over a serial line, because
Emacs binds these keys to commands by default.  Because Emacs won't
honor them as flow control characters, too many of these characters are
not passed on and overwhelm output buffers.  Sometimes, intermediate
software using XON/XOFF flow control will prevent Emacs from ever
seeing `C-s' and `C-q'.

   Possible solutions:

   * Disable the use of `C-s' and `C-q' for flow control.

     You need to determine the cause of the flow control.

        - your terminal

          Your terminal may use XON/XOFF flow control to have time to
          display all the characters it receives.  For example, VT
          series terminals do this.  It may be possible to turn this
          off from a setup menu.  For example, on a VT220 you may
          select "No XOFF" in the setup menu.  This is also true for
          some terminal emulation programs on PCs.

          When you turn off flow control at the terminal, you will also
          need to turn it off at the other end, which might be at the
          computer you are logged in to or at some terminal server in
          between.

          If you turn off flow control, characters may be lost; using a
          printer connected to the terminal may fail.  You may be able
          to get around this problem by modifying the `termcap' entry
          for your terminal to include extra NUL padding characters.

        - a modem

          If you are using a dialup connection, the modems may be using
          XON/XOFF flow control.  It's not clear how to get around this.

        - a router or terminal server

          Some network box between the terminal and your computer may
          be using XON/XOFF flow control.  It may be possible to make
          it use some other kind of flow control.  You will probably
          have to ask your local network experts for help with this.

        - `tty' and/or `pty' devices

          If your connection to Emacs goes through multiple `tty' and/or
          `pty' devices, they may be using XON/XOFF flow control even
          when it is not necessary.

          Eirik Fuller <eirik@theory.tn.cornell.edu> writes:

               Some versions of `rlogin' (and possibly `telnet') do not
               pass flow control characters to the remote system to
               which they connect.  On such systems, Emacs on the
               remote system cannot disable flow control on the local
               system.  Sometimes `rlogin -8' will avoid this problem.

               One way to cure this is to disable flow control on the
               local host (the one running `rlogin', not the one
               running `rlogind') using the `stty' command, before
               starting the `rlogin' process.  On many systems, `stty
               start u stop u' will do this.

               Some versions of `tcsh' will prevent even this from
               working.  One way around this is to start another shell
               before starting rlogin, and issue the `stty' command to
               disable flow control from that shell.

          Use `stty -ixon' instead of `stty start u stop u' on some
          systems.


   * Make Emacs speak the XON/XOFF flow control protocol.

     You can make Emacs treat `C-s' and `C-q' as flow control
     characters by evaluating the form

          (enable-flow-control)

     to unconditionally enable flow control or

          (enable-flow-control-on "vt100" "h19")

     (using your terminal names instead of `vt100' or `h19') to enable
     selectively.  These commands will automatically swap `C-s' and
     `C-q' to `C-\' and `C-^'.  Variables can be used to change the
     default swap keys (`flow-control-c-s-replacement' and
     `flow-control-c-q-replacement').

     If you are fixing this for yourself, simply put the form in your
     `.emacs' file.  If you are fixing this for your entire site, the
     best place to put it is in the `site-lisp/site-start.el' file.
     (Here `site-lisp' is actually a subdirectory of your Emacs
     installation directory, typically `/usr/local/share/emacs'.)
     Putting this form in `site-lisp/default.el' has the problem that
     if the user's `.emacs' file has an error, this will prevent
     `default.el' from being loaded and Emacs may be unusable for the
     user, even for correcting their `.emacs' file (unless they're
     smart enough to move it to another name).

     `enable-flow-control' can be invoked interactively as well: `M-x
     enable-flow-control <RET>'.


   For further discussion of this issue, read the file `etc/PROBLEMS'
(in the Emacs source directory when you unpack the Emacs distribution).


File: efaq,  Node: Binding C-s and C-q,  Next: Backspace invokes help,  Prev: Handling C-s and C-q with flow control,  Up: Key bindings

10.8 How do I bind `C-s' and `C-q' (or any key) if these keys are filtered out?
===============================================================================

To bind `C-s' and `C-q', use either `enable-flow-control' or
`enable-flow-control-on'.  *Note Handling C-s and C-q with flow
control::, for usage and implementation details.

   To bind other keys, use `keyboard-translate'.  *Note Swapping
keys::, for usage details.  To do this for an entire site, you should
swap the keys in `site-lisp/site-start.el'.  *Note Handling C-s and C-q
with flow control::, for an explanation of why `site-lisp/default.el'
should not be used.

   * If you do this for an entire site, the users will be confused by
     the disparity between what the documentation says and how Emacs
     actually behaves.



File: efaq,  Node: Backspace invokes help,  Next: stty and Backspace key,  Prev: Binding C-s and C-q,  Up: Key bindings

10.9 Why does the <Backspace> key invoke help?
==============================================

The <Backspace> key (on most keyboards) generates ASCII code 8.  `C-h'
sends the same code.  In Emacs by default `C-h' invokes help-command.
This is intended to be easy to remember since the first letter of
`help' is `h'.  The easiest solution to this problem is to use `C-h'
(and <Backspace>) for help and <DEL> (the <Delete> key) for deleting
the previous character.

   For many people this solution may be problematic:

   * They normally use <Backspace> outside of Emacs for deleting the
     previous character.  This can be solved by making <DEL> the command
     for deleting the previous character outside of Emacs.  On many Unix
     systems, this command will remap <DEL>:

          stty erase `^?'

   * The user may prefer the <Backspace> key for deleting the previous
     character because it is more conveniently located on their
     keyboard or because they don't even have a separate <Delete> key.
     In this case, the <Backspace> key should be made to behave like
     <Delete>.  There are several methods.

        - Some terminals (e.g., VT3## terminals) and terminal emulators
          (e.g., TeraTerm) allow the character generated by the
          <Backspace> key to be changed from a setup menu.

        - You may be able to get a keyboard that is completely
          programmable, or a terminal emulator that supports remapping
          of any key to any other key.

        - With Emacs 21.1 and later, you can control the effect of the
          <Backspace> and <Delete> keys, on both dumb terminals and a
          windowed displays, by customizing the option
          `normal-erase-is-backspace-mode', or by invoking `M-x
          normal-erase-is-backspace'.  See the documentation of these
          symbols (*note Emacs Lisp documentation::) for more info.

        - It is possible to swap the <Backspace> and <DEL> keys inside
          Emacs:

               (keyboard-translate ?\C-h ?\C-?)

          This is the recommended method of forcing <Backspace> to act
          as <DEL>, because it works even in modes which bind <DEL> to
          something other than `delete-backward-char'.

          Similarly, you could remap <DEL> to act as `C-d', which by
          default deletes forward:

               (keyboard-translate ?\C-? ?\C-d)

          *Note Swapping keys::, for further details about
          `keyboard-translate'.

        - Another approach is to switch key bindings and put help on
          `C-x h' instead:

               (global-set-key "\C-h" 'delete-backward-char)

               ;; overrides mark-whole-buffer
               (global-set-key "\C-xh" 'help-command)

          This method is not recommended, though: it only solves the
          problem for those modes which bind <DEL> to
          `delete-backward-char'.  Modes which bind <DEL> to something
          else, such as `view-mode', will not work as you expect when
          you press the <Backspace> key.  For this reason, we recommend
          the `keyboard-translate' method, shown above.

          Other popular key bindings for help are `M-?' and `C-x ?'.

     Don't try to bind <DEL> to `help-command', because there are many
     modes that have local bindings of <DEL> that will interfere.


   When Emacs 21 or later runs on a windowed display, it binds the
<Delete> key to a command which deletes the character at point, to make
Emacs more consistent with keyboard operation on these systems.

   For more information about troubleshooting this problem, see *note
If <DEL> Fails to Delete: (emacs)DEL Does Not Delete.


File: efaq,  Node: stty and Backspace key,  Next: Swapping keys,  Prev: Backspace invokes help,  Up: Key bindings

10.10 Why doesn't Emacs look at the `stty' settings for <Backspace> vs. <Delete>?
=================================================================================

Good question!


File: efaq,  Node: Swapping keys,  Next: Producing C-XXX with the keyboard,  Prev: stty and Backspace key,  Up: Key bindings

10.11 How do I swap two keys?
=============================

You can swap two keys (or key sequences) by using the
`keyboard-translate' function.  For example, to turn `C-h' into <DEL>
and <DEL> to `C-h', use

     (keyboard-translate ?\C-h ?\C-?)  ; translate `C-h' to DEL
     (keyboard-translate ?\C-? ?\C-h)  ; translate DEL to `C-h'.

The first key sequence of the pair after the function identifies what is
produced by the keyboard; the second, what is matched for in the
keymaps.

   However, in the specific case of `C-h' and <DEL>, you should toggle
`normal-erase-is-backspace-mode' instead of calling
`keyboard-translate'.  *note DEL Does Not Delete: (emacs)DEL Does Not
Delete.

   Keyboard translations are not the same as key bindings in keymaps.
Emacs contains numerous keymaps that apply in different situations, but
there is only one set of keyboard translations, and it applies to every
character that Emacs reads from the terminal.  Keyboard translations
take place at the lowest level of input processing; the keys that are
looked up in keymaps contain the characters that result from keyboard
translation.


File: efaq,  Node: Producing C-XXX with the keyboard,  Next: No Meta key,  Prev: Swapping keys,  Up: Key bindings

10.12 How do I produce C-XXX with my keyboard?
==============================================

On terminals (but not under X), some common "aliases" are:

`C-2'  or  `C-<SPC>'
     `C-@'

`C-6'
     `C-^'

`C-7'  or  `C-S--'
     `C-_'

`C-4'
     `C-\'

`C-5'
     `C-]'

`C-/'
     `C-?'


   Often other aliases exist; use the `C-h c' command and try <CTRL>
with all of the digits on your keyboard to see what gets generated.
You can also try the `C-h w' command if you know the name of the
command.


File: efaq,  Node: No Meta key,  Next: No Escape key,  Prev: Producing C-XXX with the keyboard,  Up: Key bindings

10.13 What if I don't have a <Meta> key?
========================================

On many keyboards, the <Alt> key acts as <Meta>, so try it.

   Instead of typing `M-a', you can type `<ESC> a'.  In fact, Emacs
converts `M-a' internally into `<ESC> a' anyway (depending on the value
of `meta-prefix-char').  Note that you press <Meta> and <a> together,
but with <ESC>, you press <ESC>, release it, and then press <a>.


File: efaq,  Node: No Escape key,  Next: Compose Character,  Prev: No Meta key,  Up: Key bindings

10.14 What if I don't have an <Escape> key?
===========================================

Type `C-[' instead.  This should send ASCII code 27 just like an Escape
key would.  `C-3' may also work on some terminal (but not under X).
For many terminals (notably DEC terminals) <F11> generates <ESC>.  If
not, the following form can be used to bind it:

     ;; F11 is the documented ESC replacement on DEC terminals.
     (define-key function-key-map [f11] [?\e])


File: efaq,  Node: Compose Character,  Next: Binding combinations of modifiers and function keys,  Prev: No Escape key,  Up: Key bindings

10.15 Can I make my <Compose Character> key behave like a <Meta> key?
=====================================================================

On a dumb terminal such as a VT220, no.  It is rumored that certain
VT220 clones could have their <Compose> key configured this way.  If
you're using X, you might be able to do this with the `xmodmap' command.


File: efaq,  Node: Binding combinations of modifiers and function keys,  Next: Meta key does not work in xterm,  Prev: Compose Character,  Up: Key bindings

10.16 How do I bind a combination of modifier key and function key?
===================================================================

With Emacs 19 and later, you can represent modified function keys in
vector format by adding prefixes to the function key symbol.  For
example (from the on-line documentation):

     (global-set-key [?\C-x right] 'forward-page)

where `?\C-x' is the Lisp character constant for the character `C-x'.

   You can use the modifier keys <Control>, <Meta>, <Hyper>, <Super>,
<Alt>, and <Shift> with function keys.  To represent these modifiers,
prepend the strings `C-', `M-', `H-', `s-', `A-', and `S-' to the
symbol name.  Here is how to make `H-M-RIGHT' move forward a word:

     (global-set-key [H-M-right] 'forward-word)

   * Not all modifiers are permitted in all situations.  <Hyper>,
     <Super>, and <Alt> are not available on Unix character terminals.
     Non-ASCII keys and mouse events (e.g. `C-=' and `Mouse-1') also
     fall under this category.


   *Note Binding keys to commands::, for general key binding
instructions.


File: efaq,  Node: Meta key does not work in xterm,  Next: ExtendChar key does not work as Meta,  Prev: Binding combinations of modifiers and function keys,  Up: Key bindings

10.17 Why doesn't my <Meta> key work in an `xterm' window?
==========================================================

*note Single-Byte Character Set Support: (emacs)Unibyte Mode.

   If the advice in the Emacs manual fails, try all of these methods
before asking for further help:

   * You may have big problems using `mwm' as your window manager.
     (Does anyone know a good generic solution to allow the use of the
     <Meta> key in Emacs with `mwm'?)

   * For X11: Make sure it really is a <Meta> key.  Use `xev' to find
     out what keysym your <Meta> key generates.  It should be either
     `Meta_L' or `Meta_R'.  If it isn't, use `xmodmap' to fix the
     situation.  If <Meta> does generate `Meta_L' or `Meta_R', but
     `M-x' produces a non-ASCII character, put this in your
     `~/.Xdefaults' file:

           XTerm*eightBitInput:   false
           XTerm*eightBitOutput:  true

   * Make sure the `pty' the `xterm' is using is passing 8 bit
     characters.  `stty -a' (or `stty everything') should show `cs8'
     somewhere.  If it shows `cs7' instead, use `stty cs8 -istrip' (or
     `stty pass8') to fix it.

   * If there is an `rlogin' connection between `xterm' and Emacs, the
     `-8' argument may need to be given to rlogin to make it pass all 8
     bits of every character.

   * If Emacs is running on Ultrix, it is reported that evaluating
     `(set-input-mode t nil)' helps.

   * If all else fails, you can make `xterm' generate `<ESC> W' when
     you type `M-W', which is the same conversion Emacs would make if it
     got the `M-W' anyway.  In X11R4, the following resource
     specification will do this:

          XTerm.VT100.EightBitInput: false

     (This changes the behavior of the `insert-eight-bit' action.)

     With older `xterm's, you can specify this behavior with a
     translation:

          XTerm.VT100.Translations: #override \
            Meta<KeyPress>: string(0x1b) insert()

     You might have to replace `Meta' with `Alt'.



File: efaq,  Node: ExtendChar key does not work as Meta,  Next: SPC no longer completes file names,  Prev: Meta key does not work in xterm,  Up: Key bindings

10.18 Why doesn't my <ExtendChar> key work as a <Meta> key under HP-UX 8.0 and 9.x?
===================================================================================

This is a result of an internationalization extension in X11R4 and the
fact that HP is now using this extension.  Emacs assumes that the
`XLookupString' function returns the same result regardless of the
<Meta> key state which is no longer necessarily true.  Until Emacs is
fixed, the temporary kludge is to run this command after each time the
X server is started but preferably before any xterm clients are:

     xmodmap -e 'remove mod1 = Mode_switch'

   This will disable the use of the extra keysyms systemwide, which may
be undesirable if you actually intend to use them.


File: efaq,  Node: SPC no longer completes file names,  Prev: ExtendChar key does not work as Meta,  Up: Key bindings

10.19 Why doesn't SPC complete file names anymore?
==================================================

Starting with Emacs 22.1, `SPC' no longer completes file names in the
minibuffer, so that file names with embedded spaces could be typed
without the need to quote the spaces.

   You can get the old behavior by binding `SPC' to
`minibuffer-complete-word' in the minibuffer, as follows:

     (define-key minibuffer-local-filename-completion-map (kbd "SPC")
       'minibuffer-complete-word)

     (define-key minibuffer-local-must-match-filename-map (kbd "SPC")
       'minibuffer-complete-word)


File: efaq,  Node: Alternate character sets,  Next: Mail and news,  Prev: Key bindings,  Up: Top

11 Alternate character sets
***************************

* Menu:

* Emacs does not display 8-bit characters::
* Inputting eight-bit characters::
* Kanji and Chinese characters::
* Right-to-left alphabets::
* How to add fonts::


File: efaq,  Node: Emacs does not display 8-bit characters,  Next: Inputting eight-bit characters,  Prev: Alternate character sets,  Up: Alternate character sets

11.1 How do I make Emacs display 8-bit characters?
==================================================

*note Single-byte Character Set Support: (emacs)Unibyte Mode.  On a
Unix, when Emacs runs on a text-only terminal display or is invoked
with `emacs -nw', you typically need to use
`set-terminal-coding-system' to tell Emacs what the terminal can
display, even after setting the language environment; otherwise
non-ASCII characters will display as `?'.  On other operating systems,
such as MS-DOS and MS-Windows, Emacs queries the OS about the character
set supported by the display, and sets up the required terminal coding
system automatically.


File: efaq,  Node: Inputting eight-bit characters,  Next: Kanji and Chinese characters,  Prev: Emacs does not display 8-bit characters,  Up: Alternate character sets

11.2 How do I input eight-bit characters?
=========================================

Various methods are available for input of eight-bit characters.  See
*note Single-byte Character Set Support: (emacs)Unibyte Mode.  For more
sophisticated methods, *note Input Methods: (emacs)Input Methods.


File: efaq,  Node: Kanji and Chinese characters,  Next: Right-to-left alphabets,  Prev: Inputting eight-bit characters,  Up: Alternate character sets

11.3 Where can I get an Emacs that handles kanji, Chinese, or other Far-Eastern character sets?
===============================================================================================

Emacs 20 and later includes many of the features of MULE, the
MULtilingual Enhancement to Emacs.  *Note Installing Emacs::, for
information on where to find and download the latest version of Emacs.


File: efaq,  Node: Right-to-left alphabets,  Next: How to add fonts,  Prev: Kanji and Chinese characters,  Up: Alternate character sets

11.4 Where is an Emacs that can handle Semitic (right-to-left) alphabets?
=========================================================================

Emacs 20 and later supports Hebrew characters (ISO 8859-8), but does not
yet support right-to-left character entry and display.

   Joel M. Hoffman <joel@exc.com> has written a Lisp package called
`hebrew.el' that allows right-to-left editing of Hebrew.  It reportedly
works out of the box with Emacs 19, but requires patches for Emacs 18.
Write to Joel if you want the patches or package.

   `hebrew.el' requires a Hebrew screen font, but no other hardware
support.  Joel has a screen font for PCs running MS-DOS or GNU/Linux.

   You might also try querying `archie' for files named with `hebrew';
several ftp sites in Israel may also have the necessary files.


File: efaq,  Node: How to add fonts,  Prev: Right-to-left alphabets,  Up: Alternate character sets

11.5 How do I add fonts for use with Emacs?
===========================================

First, download and install the BDF font files and any auxiliary
packages they need.  The GNU Intlfonts distribution can be found on the
GNU Software Directory Web site
(http://directory.fsf.org/localization/intlfonts.html).

   Next, if you are on X Window system, issue the following two commands
from the shell's prompt:

       xset +fp /usr/local/share/emacs/fonts
       xset fp rehash

(Modify the first command if you installed the fonts in a directory
that is not `/usr/local/share/emacs/fonts'.)  You also need to arrange
for these two commands to run whenever you log in, e.g., by adding them
to your window-system startup file, such as `~/.xsessionrc' or
`~/.gnomerc'.

   Now, add the following line to your `~/.emacs' init file:

       (add-to-list 'bdf-directory-list "/usr/share/emacs/fonts/bdf")

(Again, modify the file name if you installed the fonts elsewhere.)

   Finally, if you wish to use the installed fonts with `ps-print', add
the following line to your `~/.emacs':

       (setq ps-multibyte-buffer 'bdf-font-except-latin)

   A few additional steps are necessary for MS-Windows; they are listed
below.

   First, make sure _all_ the directories with BDF font files are
mentioned in `bdf-directory-list'.  On Unix and GNU/Linux systems, one
normally runs `make install' to install the BDF fonts in the same
directory.  By contrast, Windows users typically don't run the
Intlfonts installation command, but unpack the distribution in some
directory, which leaves the BDF fonts in its subdirectories.  For
example, assume that you unpacked Intlfonts in `C:/Intlfonts'; then you
should set `bdf-directory-list' as follows:

       (setq bdf-directory-list
         '("C:/Intlfonts/Asian"
           "C:/Intlfonts/Chinese" "C:/Intlfonts/Chinese.X"
           "C:/Intlfonts/Chinese.BIG" "C:/Intlfonts/Ethiopic"
           "C:/Intlfonts/European" "C:/Intlfonts/European.BIG"
           "C:/Intlfonts/Japanese" "C:/Intlfonts/Japanese.X"
           "C:/Intlfonts/Japanese.BIG" "C:/Intlfonts/Korean.X"
           "C:/Intlfonts/Misc"))

   Next, you need to set up the variable `w32-bdf-filename-alist' to an
alist of the BDF fonts and their corresponding file names.  Assuming
you have set `bdf-directory-list' to name all the directories with the
BDF font files, the following Lisp snippet will set up
`w32-bdf-filename-alist':

       (setq w32-bdf-filename-alist
          (w32-find-bdf-fonts bdf-directory-list))

   Now, create fontsets for the BDF fonts:

       (create-fontset-from-fontset-spec
        "-*-fixed-medium-r-normal-*-16-*-*-*-c-*-fontset-bdf,
        japanese-jisx0208:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0208.1983-*,
        katakana-jisx0201:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0201*-*,
        latin-jisx0201:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0201*-*,
        japanese-jisx0208-1978:-*-*-medium-r-normal-*-16-*-*-*-c-*-jisx0208.1978-*,
        thai-tis620:-misc-fixed-medium-r-normal--16-160-72-72-m-80-tis620.2529-1,
        lao:-misc-fixed-medium-r-normal--16-160-72-72-m-80-MuleLao-1,
        tibetan-1-column:-TibMdXA-fixed-medium-r-normal--16-160-72-72-m-80-MuleTibetan-1,
        ethiopic:-Admas-Ethiomx16f-Medium-R-Normal--16-150-100-100-M-160-Ethiopic-Unicode,
        tibetan:-TibMdXA-fixed-medium-r-normal--16-160-72-72-m-160-MuleTibetan-0")

   Many of the international bdf fonts from Intlfonts are type 0, and
therefore need to be added to font-encoding-alist:

       (setq font-encoding-alist
             (append '(("MuleTibetan-0" (tibetan . 0))
                       ("GB2312"        (chinese-gb2312 . 0))
                       ("JISX0208"      (japanese-jisx0208 . 0))
                       ("JISX0212"      (japanese-jisx0212 . 0))
                       ("VISCII"        (vietnamese-viscii-lower . 0))
                       ("KSC5601"       (korean-ksc5601 . 0))
                       ("MuleArabic-0"  (arabic-digit . 0))
                       ("MuleArabic-1"  (arabic-1-column . 0))
                       ("MuleArabic-2"  (arabic-2-column . 0)))
                     font-encoding-alist))

   You can now use the Emacs font menu to select the `bdf: 16-dot
medium' fontset, or you can select it by setting the default font in
your `~/.emacs':

       (set-default-font "fontset-bdf")


File: efaq,  Node: Mail and news,  Next: Concept index,  Prev: Alternate character sets,  Up: Top

12 Mail and news
****************

* Menu:

* Changing the included text prefix::
* Saving a copy of outgoing mail::
* Expanding aliases when sending mail::
* Rmail thinks all messages are one big one::
* Sorting the messages in an Rmail folder::
* Rmail writes to /usr/spool/mail::
* Recovering mail files when Rmail munges them::
* Replying to the sender of a message::
* MIME with Emacs mail packages::
* Automatically starting a mail or news reader::
* Reading news with Emacs::
* Gnus does not work with NNTP::
* Viewing articles with embedded underlining::
* Saving a multi-part Gnus posting::
* Starting Gnus faster::
* Catching up in all newsgroups::
* Killing based on nonstandard headers::
* Removing flashing messages::
* Catch-up is slow in Gnus::
* Gnus hangs for a long time::
* Learning more about Gnus::


File: efaq,  Node: Changing the included text prefix,  Next: Saving a copy of outgoing mail,  Prev: Mail and news,  Up: Mail and news

12.1 How do I change the included text prefix in mail/news followups?
=====================================================================

If you read mail with Rmail or news with Gnus, set the variable
`mail-yank-prefix'.  For VM, set `vm-included-text-prefix'.  For mh-e,
set `mh-ins-buf-prefix'.

   For fancier control of citations, use Supercite.  *Note Supercite::.

   To prevent Emacs from including various headers of the replied-to
message, set the value of `mail-yank-ignored-headers' to an appropriate
regexp.


File: efaq,  Node: Saving a copy of outgoing mail,  Next: Expanding aliases when sending mail,  Prev: Changing the included text prefix,  Up: Mail and news

12.2 How do I save a copy of outgoing mail?
===========================================

You can either mail yourself a copy by including a `BCC' header in the
mail message, or store a copy of the message directly to a file by
including an `FCC' header.

   If you use standard mail, you can automatically create a `BCC' to
yourself by putting

     (setq mail-self-blind t)

in your `.emacs' file.  You can automatically include an `FCC' field by
putting something like the following in your `.emacs' file:

     (setq mail-archive-file-name (expand-file-name "~/outgoing"))

   The output file will be in Unix mail format, which can be read
directly by VM, but not always by Rmail.  *Note Learning how to do
something::.

   If you use `mh-e', add an `FCC' or `BCC' field to your components
file.

   It does not work to put `set record filename' in the `.mailrc' file.


File: efaq,  Node: Expanding aliases when sending mail,  Next: Rmail thinks all messages are one big one,  Prev: Saving a copy of outgoing mail,  Up: Mail and news

12.3 Why doesn't Emacs expand my aliases when sending mail?
===========================================================

   * You must separate multiple addresses in the headers of the mail
     buffer with commas.  This is because Emacs supports RFC822
     standard addresses like this one:

          To: Willy Smith <wks@xpnsv.lwyrs.com>

     However, you do not need to--and probably should not, unless your
     system's version of `/usr/ucb/mail' (a.k.a. `mailx') supports
     RFC822--separate addresses with commas in your `~/.mailrc' file.

   * Emacs normally only reads the `.mailrc' file once per session,
     when you start to compose your first mail message.  If you edit
     `.mailrc', you can type `M-x rebuild-mail-abbrevs <RET>' to make
     Emacs reread `~/.mailrc'.

   * If you like, you can expand mail aliases as abbrevs, as soon as you
     type them in.  To enable this feature, execute the following:

          (add-hook 'mail-mode-hook 'mail-abbrevs-setup)

     Note that the aliases are expanded automatically only after you
     type <RET> or a punctuation character (e.g. `,').  You can force
     their expansion by moving point to the end of the alias and typing
     `C-x a e' (`M-x expand-abbrev').


File: efaq,  Node: Rmail thinks all messages are one big one,  Next: Sorting the messages in an Rmail folder,  Prev: Expanding aliases when sending mail,  Up: Mail and news

12.4 Why does Rmail think all my saved messages are one big message?
====================================================================

A file created through the `FCC' field in a message is in Unix mail
format, not the format that Rmail uses (BABYL format).  Rmail will try
to convert a Unix mail file into BABYL format on input, but sometimes it
makes errors.  For guaranteed safety, you can make the `saved-messages'
file be an inbox for your Rmail file by using the function
`set-rmail-inbox-list'.


File: efaq,  Node: Sorting the messages in an Rmail folder,  Next: Rmail writes to /usr/spool/mail,  Prev: Rmail thinks all messages are one big one,  Up: Mail and news

12.5 How can I sort the messages in my Rmail folder?
====================================================

In Rmail, type `C-c C-s C-h' to get a list of sorting functions and
their key bindings.


File: efaq,  Node: Rmail writes to /usr/spool/mail,  Next: Recovering mail files when Rmail munges them,  Prev: Sorting the messages in an Rmail folder,  Up: Mail and news

12.6 Why does Rmail need to write to `/usr/spool/mail'?
=======================================================

This is the behavior of the `movemail' program which Rmail uses.  This
indicates that `movemail' is configured to use lock files.

   RMS writes:

     Certain systems require lock files to interlock access to mail
     files.  On these systems, `movemail' must write lock files, or you
     risk losing mail.  You simply must arrange to let `movemail' write
     them.

     Other systems use the `flock' system call to interlock access.  On
     these systems, you should configure `movemail' to use `flock'.


File: efaq,  Node: Recovering mail files when Rmail munges them,  Next: Replying to the sender of a message,  Prev: Rmail writes to /usr/spool/mail,  Up: Mail and news

12.7 How do I recover my mail files after Rmail munges their format?
====================================================================

If you have just done `M-x rmail-input' on a file and you don't want to
save it in Rmail's format (called BABYL), just kill the buffer (with
`C-x k').

   If you typed `M-x rmail' and it read some messages out of your inbox
and you want to put them in a Unix mail file, use `C-o' on each message.

   If you want to convert an existing file from BABYL format to Unix
mail format, use the command `M-x unrmail': it will prompt you for the
input and output file names.

   Alternatively, you could use the `b2m' program supplied with Emacs.
`b2m' is a filter, and is used like this:

      b2m < BABYL-FILE > MBOX-FILE

where BABYL-FILE is the name of the BABYL file, and MBOX-FILE is the
name of the file where the converted mail will be written.


File: efaq,  Node: Replying to the sender of a message,  Next: MIME with Emacs mail packages,  Prev: Recovering mail files when Rmail munges them,  Up: Mail and news

12.8 How can I force Rmail to reply to the sender of a message, but not the other recipients?
=============================================================================================

Ron Isaacson <isaacson@seas.upenn.edu> says: When you hit <r> to reply
in Rmail, by default it CCs all of the original recipients (everyone on
the original `To' and `CC' lists). With a prefix argument (i.e., typing
`C-u' before <r>), it replies only to the sender.  However, going
through the whole `C-u' business every time you want to reply is a
pain.  This is the best fix I've been able to come up with:

     (defun rmail-reply-t ()
       "Reply only to the sender of the current message. (See rmail-reply.)"
       (interactive)
       (rmail-reply t))

     (add-hook 'rmail-mode-hook
       (lambda ()
         (define-key rmail-mode-map "r" 'rmail-reply-t)
         (define-key rmail-mode-map "R" 'rmail-reply)))


File: efaq,  Node: MIME with Emacs mail packages,  Next: Automatically starting a mail or news reader,  Prev: Replying to the sender of a message,  Up: Mail and news

12.9 How can I get my favorite Emacs mail package to support MIME?
==================================================================

Version 6.x of VM supports MIME.  *Note VM::.  Gnus supports MIME in
mail and news messages as of version 5.8.1 (Pterodactyl).  Rmail has
limited support for single-part MIME messages beginning with Emacs 20.3.


File: efaq,  Node: Automatically starting a mail or news reader,  Next: Reading news with Emacs,  Prev: MIME with Emacs mail packages,  Up: Mail and news

12.10 How do I make Emacs automatically start my mail/news reader?
==================================================================

To start Emacs in Gnus:

     emacs -f gnus

in Rmail:

     emacs -f rmail

   A more convenient way to start with Gnus:

     alias gnus 'emacs -f gnus'
     gnus

   It is probably unwise to automatically start your mail or news reader
from your `.emacs' file.  This would cause problems if you needed to run
two copies of Emacs at the same time.  Also, this would make it
difficult for you to start Emacs quickly when you needed to.


File: efaq,  Node: Reading news with Emacs,  Next: Gnus does not work with NNTP,  Prev: Automatically starting a mail or news reader,  Up: Mail and news

12.11 How do I read news under Emacs?
=====================================

Use `M-x gnus'.  It is documented in Info (*note Learning how to do
something::).


File: efaq,  Node: Gnus does not work with NNTP,  Next: Viewing articles with embedded underlining,  Prev: Reading news with Emacs,  Up: Mail and news

12.12 Why doesn't Gnus work via NNTP?
=====================================

There is a bug in NNTP version 1.5.10, such that when multiple requests
are sent to the NNTP server, the server only handles the first one
before blocking waiting for more input which never comes.  NNTP version
1.5.11 claims to fix this.

   You can work around the bug inside Emacs like this:

     (setq nntp-maximum-request 1)

   You can find out what version of NNTP your news server is running by
telnetting to the NNTP port (usually 119) on the news server machine
(i.e., `telnet server-machine 119').  The server should give its
version number in the welcome message.  Type `quit' to get out.

   *Note Spontaneous entry into isearch-mode::, for some additional
ideas.


File: efaq,  Node: Viewing articles with embedded underlining,  Next: Saving a multi-part Gnus posting,  Prev: Gnus does not work with NNTP,  Up: Mail and news

12.13 How do I view news articles with embedded underlining (e.g., ClariNews)?
==============================================================================

Underlining appears like this:

     _^Hu_^Hn_^Hd_^He_^Hr_^Hl_^Hi_^Hn_^Hi_^Hn_^Hg

   Per Abrahamsen <abraham@dina.kvl.dk> suggests using the following
code, which uses the underline face to turn such text into true
underlining, inconjunction with Gnus:

     (defun gnus-article-prepare-overstrike ()
       ;; Prepare article for overstrike commands.
       (save-excursion
         (set-buffer gnus-article-buffer)
         (let ((buffer-read-only nil))
         (goto-char (point-min))
           (while (search-forward "\b" nil t)
             (let ((next (following-char))
                   (previous (char-after (- (point) 2))))
               (cond ((eq next previous)
                      (delete-region (- (point) 2) (point))
                      (put-text-property (point) (1+ (point))
                                         'face 'bold))
                     ((eq next ?_)
                      (delete-region (1- (point)) (1+ (point)))
                      (put-text-property (1- (point)) (point)
                                         'face 'underline))
                     ((eq previous ?_)
                      (delete-region (- (point) 2) (point))
                      (put-text-property (point) (1+ (point))
                                         'face 'underline))))))))

     (add-hook 'gnus-article-prepare-hook 'gnus-article-prepare-overstrike)

   Latest versions of Gnus do such a conversion automatically.

   If you prefer to do away with underlining altogether, you can
destructively remove it with `M-x ununderline-region'; do this
automatically via

     (add-hook 'gnus-article-prepare-hook
       (lambda () (ununderline-region (point-min) (point-max))))


File: efaq,  Node: Saving a multi-part Gnus posting,  Next: Starting Gnus faster,  Prev: Viewing articles with embedded underlining,  Up: Mail and news

12.14 How do I save all the items of a multi-part posting in Gnus?
==================================================================

Use `gnus-uu'.  Type `C-c C-v C-h' in the Gnus summary buffer to see a
list of available commands.


File: efaq,  Node: Starting Gnus faster,  Next: Catching up in all newsgroups,  Prev: Saving a multi-part Gnus posting,  Up: Mail and news

12.15 How do I make Gnus start up faster?
=========================================

From the Gnus FAQ (*note Learning more about Gnus::):

     Pranav Kumar Tiwari <pktiwari@eos.ncsu.edu> writes: I posted the
     same query recently and I got an answer to it. I am going to
     repeat the answer. What you need is a newer version of gnus,
     version 5.0.4+. I am using 5.0.12 and it works fine with me with
     the following settings:

          (setq gnus-check-new-newsgroups nil
                gnus-read-active-file 'some
                gnus-nov-is-evil nil
                gnus-select-method '(nntp gnus-nntp-server))


File: efaq,  Node: Catching up in all newsgroups,  Next: Killing based on nonstandard headers,  Prev: Starting Gnus faster,  Up: Mail and news

12.16 How do I catch up all newsgroups in Gnus?
===============================================

In the `*Newsgroup*' buffer, type `M-< C-x ( c y C-x ) M-0 C-x e'

   Leave off the initial `M-<' if you only want to catch up from point
to the end of the `*Newsgroup*' buffer.


File: efaq,  Node: Killing based on nonstandard headers,  Next: Removing flashing messages,  Prev: Catching up in all newsgroups,  Up: Mail and news

12.17 Why can't I kill in Gnus based on the Newsgroups/Keywords/Control headers?
================================================================================

Gnus will complain that the `Newsgroups', `Keywords', and `Control'
headers are "Unknown header" fields.

   For the `Newsgroups' header, there is an easy workaround: kill on the
`Xref' header instead, which will be present on any cross-posted article
(as long as your site carries the cross-post group).

   If you really want to kill on one of these headers, you can do it
like this:

     (gnus-kill nil "^Newsgroups: .*\\(bad\\.group\\|worse\\.group\\)")


File: efaq,  Node: Removing flashing messages,  Next: Catch-up is slow in Gnus,  Prev: Killing based on nonstandard headers,  Up: Mail and news

12.18 How do I get rid of flashing messages in Gnus for slow connections?
=========================================================================

Set `nntp-debug-read' to `nil'.


File: efaq,  Node: Catch-up is slow in Gnus,  Next: Gnus hangs for a long time,  Prev: Removing flashing messages,  Up: Mail and news

12.19 Why is catch up slow in Gnus?
===================================

Because Gnus is marking crosspostings read.  You can control this with
the variable `gnus-use-cross-reference'.


File: efaq,  Node: Gnus hangs for a long time,  Next: Learning more about Gnus,  Prev: Catch-up is slow in Gnus,  Up: Mail and news

12.20 Why does Gnus hang for a long time when posting?
======================================================

David Lawrence <tale@uunet.uu.net> explains:

     The problem is almost always interaction between NNTP and C News.
     NNTP POST asks C News's `inews' to not background itself but
     rather hang around and give its exit status so it knows whether
     the post was successful.  (That wait will on some systems not
     return the exit status of the waited for job is a different sort
     of problem.)  It ends up taking a long time because `inews' is
     calling `relaynews', which often waits for another `relaynews' to
     free the lock on the news system so it can file the article.

     My preferred solution is to change `inews' to not call
     `relaynews', but rather use `newsspool'.  This loses some
     error-catching functionality, but is for the most part safe as
     `inews' will detect a lot of the errors on its own.  The C News
     folks have sped up `inews', too, so speed should look better to
     most folks as that update propagates around.


File: efaq,  Node: Learning more about Gnus,  Prev: Gnus hangs for a long time,  Up: Mail and news

12.21 Where can I find out more about Gnus?
===========================================

For more information on Gnus, consult the Gnus manual and FAQ, which are
part of the Gnus distribution.


File: efaq,  Node: Concept index,  Prev: Mail and news,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* #ifdef, selective display of:          Hiding #ifdef lines.  (line  6)
* $ in file names:                       Editing files with $ in the name.
                                                               (line  6)
* -debug-init option:                    Debugging a customization file.
                                                               (line  6)
* ., equivalent to vi command:           Repeating commands.   (line  6)
* .emacs debugging:                      Debugging a customization file.
                                                               (line  6)
* .emacs file, errors in:                Errors with init files.
                                                               (line  6)
* .emacs file, locating:                 Setting up a customization file.
                                                               (line  6)
* .emacs file, setting up:               Setting up a customization file.
                                                               (line  6)
* .Xdefaults:                            Emacs ignores X resources.
                                                               (line  6)
* /usr/spool/mail and Rmail:             Rmail writes to /usr/spool/mail.
                                                               (line  6)
* <Compose Character> key, using as <Meta>: Compose Character. (line  6)
* <DEL>, definition of:                  Basic keys.           (line  6)
* <Do> key:                              Extended commands.    (line 18)
* <ESC>, definition of:                  Basic keys.           (line  6)
* <ExtendChar> key as <Meta>:            ExtendChar key does not work as Meta.
                                                               (line  6)
* <Insert>:                              Overwrite mode.       (line  6)
* <LFD>, definition of:                  Basic keys.           (line  6)
* <Meta> key and xterm:                  Meta key does not work in xterm.
                                                               (line  6)
* <Meta> key, notation for:              Basic keys.           (line  6)
* <Meta> key, what to do if you lack it: No Meta key.          (line  6)
* <Meta>, using <Compose Character> for: Compose Character.    (line  6)
* <Meta>, using <ExtendChar> for:        ExtendChar key does not work as Meta.
                                                               (line  6)
* <RET>, definition of:                  Basic keys.           (line  6)
* <SPC>, definition of:                  Basic keys.           (line  6)
* <TAB>, definition of:                  Basic keys.           (line  6)
* Abbrevs, turning on by default:        Turning on abbrevs by default.
                                                               (line  6)
* Abnormal exits from shell-mode:        Shell process exits abnormally.
                                                               (line  6)
* Acronyms, definitions for:             Common acronyms.      (line  6)
* add fonts for use with Emacs:          How to add fonts.     (line  6)
* Adding to load-path:                   Changing load-path.   (line  6)
* Address book:                          BBDB.                 (line  6)
* Alternate character sets:              Alternate character sets.
                                                               (line  6)
* Alternative Info file viewers:         Viewing Info files outside of Emacs.
                                                               (line  6)
* Alternative mail software:             VM.                   (line  6)
* Amiga, Emacs for:                      Emacs for the Amiga.  (line  6)
* Antivirus programs, and Shell Mode:    Problems with Shell Mode on MS-Windows.
                                                               (line 19)
* Apple computers, Emacs for:            Emacs for Apple computers.
                                                               (line  6)
* Apropos:                               Learning how to do something.
                                                               (line 22)
* Arabic alphabets:                      Right-to-left alphabets.
                                                               (line  6)
* Archived postings from gnu.emacs.help: Newsgroup archives.   (line  6)
* Arrow keys, symbols generated by:      Working with function and arrow keys.
                                                               (line  6)
* Associating modes with files:          Associating modes with files.
                                                               (line  6)
* Atari ST, Emacs for:                   Emacs for Atari ST.   (line  6)
* AUCTeX mode for editing TeX:           AUCTeX.               (line  6)
* auto-fill-mode, activating automatically: Turning on auto-fill by default.
                                                               (line  6)
* auto-fill-mode, introduction to:       Wrapping words automatically.
                                                               (line  6)
* auto-mode-alist, modifying:            Associating modes with files.
                                                               (line  6)
* Auto-saving:                           Disabling auto-save-mode.
                                                               (line  6)
* Automatic entry to auto-fill-mode:     Turning on auto-fill by default.
                                                               (line  6)
* Automatic filing of outgoing mail:     Saving a copy of outgoing mail.
                                                               (line  6)
* Awk, mode for:                         Modes for various languages.
                                                               (line  6)
* awk-mode:                              Modes for various languages.
                                                               (line  6)
* Backspace and stty:                    stty and Backspace key.
                                                               (line  6)
* Backspace key invokes help:            Backspace invokes help.
                                                               (line  6)
* Backup files in a single directory:    Disabling backups.    (line 30)
* Backups, disabling:                    Disabling backups.    (line  6)
* Basic editing with Emacs:              Basic editing.        (line  6)
* Basic keys:                            Basic keys.           (line  6)
* BBDB:                                  BBDB.                 (line  6)
* Beeping without obvious reason:        Spontaneous entry into isearch-mode.
                                                               (line  6)
* Beeping, turning off:                  Turning off beeping.  (line  6)
* Beginning editing:                     Basic editing.        (line  6)
* Bell, visible:                         Turning off beeping.  (line  6)
* Bell, volume of:                       Turning the volume down.
                                                               (line  6)
* Big Brother Database:                  BBDB.                 (line  6)
* Binding C-s and C-q:                   Binding C-s and C-q.  (line  6)
* Binding function keys:                 Using function keys under X.
                                                               (line  6)
* Binding keys to commands:              Binding keys to commands.
                                                               (line  6)
* Binding modifiers and function keys:   Binding combinations of modifiers and function keys.
                                                               (line  6)
* Bison, mode for:                       Modes for various languages.
                                                               (line  6)
* Bourne Shell, mode for:                Modes for various languages.
                                                               (line  6)
* Bug reporting:                         Reporting bugs.       (line  6)
* Bugs and problems:                     Bugs and problems.    (line  6)
* Building Emacs from source:            Installing Emacs.     (line  6)
* C++, mode for:                         Modes for various languages.
                                                               (line  6)
* C-h, definition of:                    Basic keys.           (line  6)
* C-M-h, definition of:                  Basic keys.           (line  6)
* C-s and C-q with flow control:         Handling C-s and C-q with flow control.
                                                               (line  6)
* C-s and C-q, binding:                  Binding C-s and C-q.  (line  6)
* Calc:                                  Calc.                 (line  6)
* calculator, a package:                 Calc.                 (line 19)
* Case sensitivity in replacements:      Controlling case sensitivity.
                                                               (line 12)
* Case sensitivity of searches:          Controlling case sensitivity.
                                                               (line  6)
* case-fold-search:                      Controlling case sensitivity.
                                                               (line  6)
* case-replace:                          Controlling case sensitivity.
                                                               (line 12)
* Catching up all newsgroups in Gnus:    Catching up in all newsgroups.
                                                               (line  6)
* cc-mode:                               Modes for various languages.
                                                               (line  6)
* Checking spelling <1>:                 Ispell.               (line  6)
* Checking spelling:                     Spell-checkers.       (line  6)
* Chinese, handling with Emacs:          Kanji and Chinese characters.
                                                               (line  6)
* Citations in mail and news:            Supercite.            (line  6)
* Colorizing text:                       Turning on syntax highlighting.
                                                               (line  6)
* Colors on a TTY:                       Colors on a TTY.      (line  6)
* Colors on text-only terminals:         New in Emacs 21.      (line 14)
* Column, displaying the current:        Displaying the current line or column.
                                                               (line  6)
* Command description in the manual:     Learning how to do something.
                                                               (line 26)
* Commands, binding keys to:             Binding keys to commands.
                                                               (line  6)
* Commands, extended:                    Extended commands.    (line  6)
* Commands, repeating many times:        Repeating commands.   (line  6)
* Common acronyms, definitions for:      Common acronyms.      (line  6)
* Common requests:                       Common requests.      (line  6)
* Compilation error messages:            Going to a line by number.
                                                               (line  6)
* Compiler error messages, recognizing:  Compiler error messages.
                                                               (line  6)
* Compiling and installing Emacs:        Compiling and installing Emacs.
                                                               (line  6)
* Compiling Emacs for DOS:               Emacs for MS-DOS.     (line  6)
* Console, colors:                       Colors on a TTY.      (line  6)
* Contact database:                      BBDB.                 (line  6)
* Contracting the FSF:                   Contacting the FSF.   (line  6)
* Control characters, generating:        Producing C-XXX with the keyboard.
                                                               (line  6)
* Control characters, working with:      Working with unprintable characters.
                                                               (line  6)
* Control header, killing articles based on: Killing based on nonstandard headers.
                                                               (line  6)
* Control key, notation for:             Basic keys.           (line  6)
* Control-Meta characters, notation for: Basic keys.           (line  6)
* Conventions for file names:            File-name conventions.
                                                               (line  6)
* Converting from BABYL to Unix mail format: Recovering mail files when Rmail munges them.
                                                               (line 13)
* Copying outgoing mail to a file:       Saving a copy of outgoing mail.
                                                               (line  6)
* COPYING, description of file:          Informational files for Emacs.
                                                               (line  6)
* Copyleft, real meaning of:             Real meaning of copyleft.
                                                               (line  6)
* Creating new menu options:             Modifying pull-down menus.
                                                               (line  6)
* Crosspostings make Gnus catching up slow: Catch-up is slow in Gnus.
                                                               (line  6)
* csh mode:                              Modes for various languages.
                                                               (line  6)
* Current directory and shell-mode:      Shell mode loses the current directory.
                                                               (line  6)
* Current GNU distributions:             Current GNU distributions.
                                                               (line  6)
* Customization file, setting up:        Setting up a customization file.
                                                               (line  6)
* Customize groups:                      Using Customize.      (line  6)
* Customize indentation:                 Customizing C and C++ indentation.
                                                               (line  6)
* Customizing faces:                     Using Customize.      (line  6)
* Customizing variables:                 Using Customize.      (line  6)
* Database:                              EDB.                  (line  6)
* Debugging .emacs file <1>:             Errors with init files.
                                                               (line  6)
* Debugging .emacs file:                 Debugging a customization file.
                                                               (line  6)
* Decoration level, in font-lock-mode:   Turning on syntax highlighting.
                                                               (line 38)
* DECwindows, Emacs for:                 Emacs for VMS and DECwindows.
                                                               (line  6)
* Default features:                      New in Emacs 22.      (line  6)
* default-tab-width:                     Changing the length of a Tab.
                                                               (line  6)
* DEL key does not delete:               Backspace invokes help.
                                                               (line  6)
* Delay when visiting files:             Emacs takes a long time to visit files.
                                                               (line  6)
* Delete and stty:                       stty and Backspace key.
                                                               (line  6)
* delete-selection-mode:                 Replacing highlighted text.
                                                               (line  6)
* Deleting menus and menu options:       Deleting menus and menu options.
                                                               (line  6)
* Difference Emacs and XEmacs:           Difference between Emacs and XEmacs.
                                                               (line  6)
* Differences between Emacs 19 and Emacs 20: New in Emacs 20.  (line  6)
* Differences between Emacs 20 and Emacs 21: New in Emacs 21.  (line  6)
* Differences between Emacs 21 and Emacs 22: New in Emacs 22.  (line  6)
* Differences between Unix and Emacs regexps: Using regular expressions.
                                                               (line  6)
* Diffs and patching:                    Patch.                (line  6)
* Directories and files that come with Emacs: File-name conventions.
                                                               (line  6)
* Directory, current in shell-mode:      Shell mode loses the current directory.
                                                               (line  6)
* Dired does not see a file:             Dired claims that no file is on this line.
                                                               (line  6)
* Disabling auto-save-mode:              Disabling auto-save-mode.
                                                               (line  6)
* Disabling backups:                     Disabling backups.    (line  6)
* Discussion of the GPL:                 Real meaning of copyleft.
                                                               (line  6)
* Displaying eight-bit characters:       Emacs does not display 8-bit characters.
                                                               (line  6)
* Displaying the current line or column: Displaying the current line or column.
                                                               (line  6)
* DISTRIB, description of file:          Informational files for Emacs.
                                                               (line  6)
* Distribution, retrieving Emacs:        Finding Emacs on the Internet.
                                                               (line  6)
* Documentation:                         New in Emacs 22.      (line 70)
* Documentation for etags:               Documentation for etags.
                                                               (line  6)
* Documentation on Emacs Lisp:           Emacs Lisp documentation.
                                                               (line  6)
* Documentation, installing new Texinfo files: Installing Texinfo documentation.
                                                               (line  6)
* DOS, Emacs for:                        Emacs for MS-DOS.     (line  6)
* Downloading and installing Emacs:      Installing Emacs.     (line  6)
* Drag-and-drop:                         New in Emacs 22.      (line  6)
* E-mail reader, VM:                     VM.                   (line  6)
* E-mail, retrieving the FAQ via:        Obtaining the FAQ.    (line  6)
* Echoed commands in shell-mode:         ^M in the shell buffer.
                                                               (line  6)
* EDB:                                   EDB.                  (line  6)
* Editing files with $ in the name:      Editing files with $ in the name.
                                                               (line  6)
* Editing MS-DOS files:                  Editing MS-DOS files. (line  6)
* Eight-bit characters, displaying:      Emacs does not display 8-bit characters.
                                                               (line  6)
* Eight-bit characters, entering:        Inputting eight-bit characters.
                                                               (line  6)
* Eight-bit characters, working with:    Working with unprintable characters.
                                                               (line  6)
* Emacs 20, new features in:             New in Emacs 20.      (line  6)
* Emacs 21, new features in:             New in Emacs 21.      (line  6)
* Emacs 22, new features in:             New in Emacs 22.      (line  6)
* Emacs entries for termcap/terminfo:    Termcap/Terminfo entries for Emacs.
                                                               (line  6)
* Emacs for MS-DOS:                      Emacs for MS-DOS.     (line  6)
* Emacs for MS-Windows:                  Emacs for Windows.    (line  6)
* Emacs Lisp Archive:                    Packages that do not come with Emacs.
                                                               (line  6)
* Emacs Lisp List:                       Packages that do not come with Emacs.
                                                               (line  6)
* Emacs Lisp Manual:                     New in Emacs 22.      (line 70)
* Emacs Lisp Reference Manual:           Emacs Lisp documentation.
                                                               (line  6)
* Emacs manual, obtaining a printed or HTML copy of: Getting a printed manual.
                                                               (line  6)
* Emacs name origin:                     Origin of the term Emacs.
                                                               (line  6)
* Emacs server functions:                Using an already running Emacs process.
                                                               (line  6)
* emacsclient:                           Using an already running Emacs process.
                                                               (line  6)
* Embedded underlining in news articles: Viewing articles with embedded underlining.
                                                               (line  6)
* Emulation of vi:                       VIPER.                (line  6)
* Encryption software, interface to:     Mailcrypt.            (line  6)
* Entering eight-bit characters:         Inputting eight-bit characters.
                                                               (line  6)
* Epoch:                                 Difference between Emacs and XEmacs.
                                                               (line  6)
* Error in .emacs:                       Errors with init files.
                                                               (line  6)
* Error in init file:                    Errors with init files.
                                                               (line  6)
* Errors when building Emacs:            Problems building Emacs.
                                                               (line  6)
* Errors, recognizing compiler:          Compiler error messages.
                                                               (line  6)
* Escape key, lacking:                   No Escape key.        (line  6)
* Escape sequences in ls output:         Escape sequences in shell output.
                                                               (line  6)
* etags, documentation for:              Documentation for etags.
                                                               (line  6)
* Evaluating Lisp code:                  Evaluating Emacs Lisp code.
                                                               (line  6)
* Expanding aliases when sending mail:   Expanding aliases when sending mail.
                                                               (line  6)
* explicit-shell-file-name:              Problems with Shell Mode on MS-Windows.
                                                               (line  6)
* Exporting messages as Unix mail files: Recovering mail files when Rmail munges them.
                                                               (line 10)
* Extended commands:                     Extended commands.    (line  6)
* FAQ for Gnus:                          Learning more about Gnus.
                                                               (line  6)
* FAQ for MIME and Emacs:                MIME with Emacs mail packages.
                                                               (line  6)
* FAQ for NT Emacs:                      Emacs for Windows.    (line  6)
* FAQ notation:                          FAQ notation.         (line  6)
* FAQ, font-lock-mode:                   Turning on syntax highlighting.
                                                               (line  6)
* FAQ, obtaining the:                    Obtaining the FAQ.    (line  6)
* Faster, starting Gnus:                 Starting Gnus faster. (line  6)
* File extensions and modes:             Associating modes with files.
                                                               (line  6)
* File name, displaying in the titlebar: Displaying the current file name in the titlebar.
                                                               (line  6)
* File names containing $, editing:      Editing files with $ in the name.
                                                               (line  6)
* file-local-variable and security:      Security risks with Emacs.
                                                               (line  6)
* File-name conventions:                 File-name conventions.
                                                               (line  6)
* Files included with Emacs:             Informational files for Emacs.
                                                               (line  6)
* Files, maximum size:                   Problems with very large files.
                                                               (line  6)
* Files, replacing strings across multiple: Replacing text across multiple files.
                                                               (line  6)
* Files, take a long time to visit:      Emacs takes a long time to visit files.
                                                               (line  6)
* Filing outgoing mail:                  Saving a copy of outgoing mail.
                                                               (line  6)
* Fill prefix:                           Automatic indentation.
                                                               (line 21)
* fill-column, default value:            Wrapping words automatically.
                                                               (line  6)
* Filling automatically:                 Turning on auto-fill by default.
                                                               (line  6)
* Finding an Emacs Lisp package:         Finding a package with particular functionality.
                                                               (line  6)
* Finding commands and variables:        Learning how to do something.
                                                               (line 30)
* Finding current GNU software:          Current GNU distributions.
                                                               (line  6)
* Finding Emacs and related packages:    Finding Emacs and related packages.
                                                               (line  6)
* Finding Emacs on the Internet:         Finding Emacs on the Internet.
                                                               (line  6)
* Finding other packages:                Packages that do not come with Emacs.
                                                               (line  6)
* Finding topics in the on-line manual:  On-line manual.       (line  6)
* Flashing Gnus messages, removing:      Removing flashing messages.
                                                               (line  6)
* Flow control, C-s and C-q with:        Handling C-s and C-q with flow control.
                                                               (line  6)
* Folder, sorting messages in an Rmail:  Sorting the messages in an Rmail folder.
                                                               (line  6)
* font-lock-mode:                        Turning on syntax highlighting.
                                                               (line  6)
* Forms mode:                            EDB.                  (line  6)
* Frame parameters:                      Emacs ignores frame parameters.
                                                               (line  6)
* frame-title-format:                    Displaying the current file name in the titlebar.
                                                               (line  6)
* Free Software Foundation, contacting:  Contacting the FSF.   (line  6)
* FSF, definition of:                    Common acronyms.      (line  6)
* FTP, definition of:                    Common acronyms.      (line  6)
* FTP, description of file:              Informational files for Emacs.
                                                               (line  6)
* Fullscreen mode:                       Fullscreen mode on MS-Windows.
                                                               (line  6)
* Function documentation:                Emacs Lisp documentation.
                                                               (line  6)
* Function keys:                         Using function keys under X.
                                                               (line  6)
* Function keys and modifiers:           Binding combinations of modifiers and function keys.
                                                               (line  6)
* Function keys, symbols generated by:   Working with function and arrow keys.
                                                               (line  6)
* Functionality, finding a particular package: Finding a package with particular functionality.
                                                               (line  6)
* General Public License, real meaning of: Real meaning of copyleft.
                                                               (line  6)
* General questions:                     General questions.    (line  6)
* Generating control characters:         Producing C-XXX with the keyboard.
                                                               (line  6)
* gethostbyname, problematic version:    Problems talking to certain hosts.
                                                               (line  6)
* Getting help:                          Getting help.         (line  6)
* GNU mailing lists:                     Guidelines for newsgroup postings.
                                                               (line  6)
* GNU newsgroups, appropriate messages for: Guidelines for newsgroup postings.
                                                               (line  6)
* GNU, definition of:                    Common acronyms.      (line  6)
* GNU, description of file:              Informational files for Emacs.
                                                               (line  6)
* Gnus and NNTP:                         Gnus does not work with NNTP.
                                                               (line  6)
* Gnus FAQ:                              Learning more about Gnus.
                                                               (line  6)
* Gnus hangs while posting:              Gnus hangs for a long time.
                                                               (line  6)
* Gnus is slow when catching up:         Catch-up is slow in Gnus.
                                                               (line  6)
* Gnus newsreader:                       Reading news with Emacs.
                                                               (line  6)
* Gnus, Catching up all newsgroups in:   Catching up in all newsgroups.
                                                               (line  6)
* Gnus, flashing messages in:            Removing flashing messages.
                                                               (line  6)
* Gnus, saving multi-part postings in:   Saving a multi-part Gnus posting.
                                                               (line  6)
* Gnus, starting faster:                 Starting Gnus faster. (line  6)
* gnuserv:                               Using an already running Emacs process.
                                                               (line 53)
* Going to a line by number:             Going to a line by number.
                                                               (line  6)
* Good bug reports:                      Reporting bugs.       (line  6)
* GPG:                                   Mailcrypt.            (line  6)
* GPL, definition of:                    Common acronyms.      (line  6)
* GPL, real meaning of:                  Real meaning of copyleft.
                                                               (line  6)
* GTK+ Toolkit:                          New in Emacs 22.      (line  6)
* Hangs in Gnus:                         Gnus hangs for a long time.
                                                               (line  6)
* Hebrew, handling with Emacs:           Right-to-left alphabets.
                                                               (line  6)
* Help for Emacs:                        Learning how to do something.
                                                               (line  6)
* Help installing Emacs:                 Help installing Emacs.
                                                               (line  6)
* Help invoked by Backspace:             Backspace invokes help.
                                                               (line  6)
* Help system, entering the:             Basic editing.        (line  6)
* hide-ifdef-mode:                       Hiding #ifdef lines.  (line  6)
* Hiding #ifdef text:                    Hiding #ifdef lines.  (line  6)
* Highlighting and replacing text:       Replacing highlighted text.
                                                               (line  6)
* Highlighting based on syntax:          Turning on syntax highlighting.
                                                               (line  6)
* Highlighting matching parentheses:     Matching parentheses. (line  6)
* Highlighting text:                     Highlighting a region.
                                                               (line  6)
* hilit19 is deprecated:                 Turning on syntax highlighting.
                                                               (line 14)
* Horizontal scrolling:                  Horizontal scrolling. (line  6)
* Hosts, Emacs cannot talk to:           Problems talking to certain hosts.
                                                               (line  6)
* How to submit a bug report:            Reporting bugs.       (line  6)
* HP-UX, the <ExtendChar> key:           ExtendChar key does not work as Meta.
                                                               (line  6)
* hscroll-mode:                          Horizontal scrolling. (line  6)
* HTML browser in Emacs:                 Emacs/W3.             (line  6)
* HTML version of Emacs manual, obtaining: Getting a printed manual.
                                                               (line 19)
* Iconification under the X Window System: Forcing Emacs to iconify itself.
                                                               (line  6)
* Ignored X resources:                   Emacs ignores X resources.
                                                               (line  6)
* Ignoring case in searches:             Controlling case sensitivity.
                                                               (line  6)
* Included text prefix, changing:        Changing the included text prefix.
                                                               (line  6)
* Indentation, how to customize:         Customizing C and C++ indentation.
                                                               (line  6)
* Indenting new lines:                   Automatic indentation.
                                                               (line  6)
* Indenting of switch:                   Indenting switch statements.
                                                               (line  6)
* Index search in a manual:              Learning how to do something.
                                                               (line 13)
* Info file viewers:                     Viewing Info files outside of Emacs.
                                                               (line  6)
* Info files, how to install:            Installing Texinfo documentation.
                                                               (line  6)
* Info, finding topics in:               On-line manual.       (line  6)
* Informational files included with Emacs: Informational files for Emacs.
                                                               (line  6)
* Init file debugging:                   Debugging a customization file.
                                                               (line  6)
* Init file, errors in:                  Errors with init files.
                                                               (line  6)
* Init file, setting up:                 Setting up a customization file.
                                                               (line  6)
* Input, 8-bit characters:               Inputting eight-bit characters.
                                                               (line  6)
* Installation help:                     Help installing Emacs.
                                                               (line  6)
* Installing Emacs:                      Installing Emacs.     (line  6)
* Installing Texinfo documentation:      Installing Texinfo documentation.
                                                               (line  6)
* Integrated contact database:           BBDB.                 (line  6)
* Integrated Java development environment: JDE.                (line  6)
* Interface to PGP from Emacs mail and news: Mailcrypt.        (line  6)
* Internet, retrieving from:             Finding Emacs on the Internet.
                                                               (line  6)
* INTERVIEW, description of file:        Informational files for Emacs.
                                                               (line  6)
* intlfonts:                             How to add fonts.     (line  6)
* Invalid prefix characters:             Invalid prefix characters.
                                                               (line  6)
* isearch yanking:                       Yanking text in isearch.
                                                               (line  6)
* isearch-mode, spontaneous entry into:  Spontaneous entry into isearch-mode.
                                                               (line  6)
* Ispell:                                Ispell.               (line  6)
* Japanese, handling with Emacs:         Kanji and Chinese characters.
                                                               (line  6)
* Java development environment:          JDE.                  (line  6)
* Java, mode for:                        Modes for various languages.
                                                               (line  6)
* JDE:                                   JDE.                  (line  6)
* Just-In-Time syntax highlighting:      Turning on syntax highlighting.
                                                               (line 30)
* Kanji, handling with Emacs:            Kanji and Chinese characters.
                                                               (line  6)
* Key bindings:                          Key bindings.         (line  6)
* Key translations under X:              X key translations for Emacs.
                                                               (line  6)
* keyboard-translate:                    Swapping keys.        (line  6)
* Keymaps and menus:                     Modifying pull-down menus.
                                                               (line  6)
* Keys, binding to commands:             Binding keys to commands.
                                                               (line  6)
* Keys, swapping:                        Swapping keys.        (line  6)
* Keywords header, killing articles based on: Killing based on nonstandard headers.
                                                               (line  6)
* Killing articles based on nonstandard headers: Killing based on nonstandard headers.
                                                               (line  6)
* Korean, handling with Emacs:           Kanji and Chinese characters.
                                                               (line  6)
* Lacking an Escape key:                 No Escape key.        (line  6)
* Large files, opening:                  Problems with very large files.
                                                               (line  6)
* Latest FAQ version, obtaining the:     Obtaining the FAQ.    (line  6)
* Latest version of Emacs:               Latest version of Emacs.
                                                               (line  6)
* League for Programming Freedom:        The LPF.              (line  6)
* Learning more about Gnus:              Learning more about Gnus.
                                                               (line  6)
* Learning to do something in Emacs:     Learning how to do something.
                                                               (line  6)
* Length of tab character:               Changing the length of a Tab.
                                                               (line  6)
* Levels of syntax highlighting:         Turning on syntax highlighting.
                                                               (line 38)
* Lex mode:                              Modes for various languages.
                                                               (line  6)
* Line number, displaying the current:   Displaying the current line or column.
                                                               (line  6)
* Line wrap:                             Wrapping words automatically.
                                                               (line  6)
* line-number-mode:                      Displaying the current line or column.
                                                               (line  6)
* Linking with -lX11 fails:              Linking with -lX11 fails.
                                                               (line  6)
* Lisp forms, evaluating:                Evaluating Emacs Lisp code.
                                                               (line  6)
* Lisp packages that do not come with Emacs: Packages that do not come with Emacs.
                                                               (line  6)
* load-path, modifying:                  Changing load-path.   (line  6)
* Lookup a subject in a manual:          Learning how to do something.
                                                               (line 13)
* LPF, definition of:                    Common acronyms.      (line  6)
* LPF, description of:                   The LPF.              (line  6)
* LPF, description of file:              Informational files for Emacs.
                                                               (line  6)
* ls in Shell mode:                      Escape sequences in shell output.
                                                               (line  6)
* Lucid Emacs:                           Difference between Emacs and XEmacs.
                                                               (line  6)
* lX11, linking fails with:              Linking with -lX11 fails.
                                                               (line  6)
* M-x, meaning of:                       Extended commands.    (line  6)
* MACHINES, description of file:         Informational files for Emacs.
                                                               (line  6)
* Macintosh, Emacs for:                  Emacs for Apple computers.
                                                               (line  6)
* Mail alias expansion:                  Expanding aliases when sending mail.
                                                               (line  6)
* Mail and news:                         Mail and news.        (line  6)
* Mail and news citations:               Supercite.            (line  6)
* Mail files, recovering those munged by Rmail: Recovering mail files when Rmail munges them.
                                                               (line  6)
* Mail packages and MIME:                MIME with Emacs mail packages.
                                                               (line  6)
* Mail reader, starting automatically:   Automatically starting a mail or news reader.
                                                               (line  6)
* Mail replies, inserting a prefix character: Inserting text at the beginning of each line.
                                                               (line  6)
* Mail, interface to PGP from:           Mailcrypt.            (line  6)
* Mail, saving outgoing automatically:   Saving a copy of outgoing mail.
                                                               (line  6)
* mail-yank-prefix:                      Inserting text at the beginning of each line.
                                                               (line  6)
* Mailing lists, appropriate messages for: Guidelines for newsgroup postings.
                                                               (line  6)
* MAILINGLISTS, description of file:     Informational files for Emacs.
                                                               (line  6)
* Major mode for shell scripts:          Associating modes with files.
                                                               (line 17)
* Major packages and programs:           Major packages and programs.
                                                               (line  6)
* Manual, obtaining a printed or HTML copy of: Getting a printed manual.
                                                               (line  6)
* Matching parentheses:                  Matching parentheses. (line  6)
* Mathematical package:                  Calc.                 (line  6)
* Maximize frame:                        Fullscreen mode on MS-Windows.
                                                               (line  6)
* Maximum file size:                     Problems with very large files.
                                                               (line  6)
* Maximum line width, default value:     Wrapping words automatically.
                                                               (line  6)
* Menus and keymaps:                     Modifying pull-down menus.
                                                               (line  6)
* Menus, creating or modifying:          Modifying pull-down menus.
                                                               (line  6)
* Menus, deleting:                       Deleting menus and menu options.
                                                               (line  6)
* Microsoft files, editing:              Editing MS-DOS files. (line  6)
* Microsoft Windows, Emacs for:          Emacs for Windows.    (line  6)
* MIME and Emacs mail packages:          MIME with Emacs mail packages.
                                                               (line  6)
* Misspecified key sequences:            Invalid prefix characters.
                                                               (line  6)
* Mode for TeX:                          AUCTeX.               (line  6)
* mode-line-format:                      Displaying the current line or column.
                                                               (line  6)
* Modes, associating with file extensions: Associating modes with files.
                                                               (line  6)
* Modifiers and function keys:           Binding combinations of modifiers and function keys.
                                                               (line  6)
* Modifying load-path:                   Changing load-path.   (line  6)
* Modifying pull-down menus:             Modifying pull-down menus.
                                                               (line  6)
* Mouse wheel:                           New in Emacs 22.      (line 24)
* movemail and security:                 Security risks with Emacs.
                                                               (line  6)
* MS-DOS files, editing:                 Editing MS-DOS files. (line  6)
* MS-DOS, Emacs for:                     Emacs for MS-DOS.     (line  6)
* Multi-part postings in Gnus, saving:   Saving a multi-part Gnus posting.
                                                               (line  6)
* Multilingual Environment:              New in Emacs 22.      (line 55)
* Multiple files, replacing across:      Replacing text across multiple files.
                                                               (line  6)
* New lines, indenting of:               Automatic indentation.
                                                               (line  6)
* New modes:                             New in Emacs 22.      (line 49)
* New Texinfo files, installing:         Installing Texinfo documentation.
                                                               (line  6)
* News and mail citations:               Supercite.            (line  6)
* News articles with embedded underlining: Viewing articles with embedded underlining.
                                                               (line  6)
* News reader, starting automatically:   Automatically starting a mail or news reader.
                                                               (line  6)
* News replies, inserting a prefix character: Inserting text at the beginning of each line.
                                                               (line  6)
* NEWS, description of file:             Informational files for Emacs.
                                                               (line  6)
* News, interface to PGP from:           Mailcrypt.            (line  6)
* Newsgroups header, killing articles based on: Killing based on nonstandard headers.
                                                               (line  6)
* Newsgroups, appropriate messages for:  Guidelines for newsgroup postings.
                                                               (line  6)
* NeXTSTEP, Emacs for:                   Emacs for NeXTSTEP.   (line  6)
* NNTP, Gnus fails to work with:         Gnus does not work with NNTP.
                                                               (line  6)
* No <Meta> key:                         No Meta key.          (line  6)
* No Escape key:                         No Escape key.        (line  6)
* Notation for keys:                     Basic keys.           (line  6)
* Objective-C, mode for:                 Modes for various languages.
                                                               (line  6)
* Official GNU software sites:           Current GNU distributions.
                                                               (line  6)
* Old Usenet postings for GNU groups:    Newsgroup archives.   (line  6)
* On-line manual, reading topics in:     On-line manual.       (line  6)
* One space following periods:           Filling paragraphs with a single space.
                                                               (line  6)
* Opening very large files:              Problems with very large files.
                                                               (line  6)
* Ordering GNU software:                 Contacting the FSF.   (line 24)
* Origin of the term "Emacs":            Origin of the term Emacs.
                                                               (line  6)
* Original version of Emacs:             Origin of the term Emacs.
                                                               (line  6)
* OS/2, Emacs for:                       Emacs for OS/2.       (line  6)
* OSF, definition of:                    Common acronyms.      (line  6)
* Overview of help systems:              Learning how to do something.
                                                               (line  6)
* overwrite-mode:                        Overwrite mode.       (line  6)
* Overwriting existing text:             Overwrite mode.       (line  6)
* Package, finding:                      Finding a package with particular functionality.
                                                               (line  6)
* Packages, those that do not come with Emacs: Packages that do not come with Emacs.
                                                               (line  6)
* Pairs of parentheses, highlighting:    Matching parentheses. (line  6)
* paren.el:                              Matching parentheses. (line  6)
* Parentheses, matching:                 Matching parentheses. (line  6)
* pascal-mode:                           Modes for various languages.
                                                               (line  6)
* patch:                                 Patch.                (line  6)
* Patching source files with diffs:      Patch.                (line  6)
* Patents for software, opposition to:   The LPF.              (line  6)
* Periods, one space following:          Filling paragraphs with a single space.
                                                               (line  6)
* PGP:                                   Mailcrypt.            (line  6)
* picture-mode:                          Forcing the cursor to remain in the same column.
                                                               (line  6)
* Postal address of the FSF:             Contacting the FSF.   (line  6)
* Postal service, ordering Emacs via:    Finding Emacs on the Internet.
                                                               (line  6)
* Posting messages to newsgroups:        Guidelines for newsgroup postings.
                                                               (line  6)
* Posting, Gnus hangs wile:              Gnus hangs for a long time.
                                                               (line  6)
* Prefix character, inserting in mail/news replies: Inserting text at the beginning of each line.
                                                               (line  6)
* Prefix characters, invalid:            Invalid prefix characters.
                                                               (line  6)
* Prefix in mail/news followups, changing: Changing the included text prefix.
                                                               (line  6)
* Prefixing a region with some text:     Inserting text at the beginning of each line.
                                                               (line  6)
* Prefixing lines:                       Automatic indentation.
                                                               (line 21)
* Previous line, indenting according to: Automatic indentation.
                                                               (line  6)
* Printed Emacs manual, obtaining:       Getting a printed manual.
                                                               (line  6)
* Printing a Texinfo file:               Printing a Texinfo file.
                                                               (line  6)
* Printing documentation:                Printing a Texinfo file.
                                                               (line  6)
* Problems building Emacs:               Problems building Emacs.
                                                               (line  6)
* Process shell exited:                  Shell process exits abnormally.
                                                               (line  6)
* Producing control characters:          Producing C-XXX with the keyboard.
                                                               (line  6)
* Programmable calculator:               Calc.                 (line  6)
* Pull-down menus, creating or modifying: Modifying pull-down menus.
                                                               (line  6)
* Quoting in mail messages:              Changing the included text prefix.
                                                               (line  6)
* Reading news under Emacs:              Reading news with Emacs.
                                                               (line  6)
* Reading the Emacs manual:              Learning how to do something.
                                                               (line  8)
* Reading topics in the on-line manual:  On-line manual.       (line  6)
* Recently introduced features <1>:      New in Emacs 22.      (line  6)
* Recently introduced features:          New in Emacs 21.      (line  6)
* Recognizing non-standard compiler errors: Compiler error messages.
                                                               (line  6)
* Recompilation:                         Going to a line by number.
                                                               (line  6)
* Recovering munged mail files:          Recovering mail files when Rmail munges them.
                                                               (line  6)
* Recursive search/replace operations:   Replacing text across multiple files.
                                                               (line  6)
* Reducing the increment when scrolling: Scrolling only one line.
                                                               (line  6)
* Reference card for Emacs:              Learning how to do something.
                                                               (line  6)
* Reference cards, in other languages:   Learning how to do something.
                                                               (line 40)
* Reference manual for Emacs Lisp:       Emacs Lisp documentation.
                                                               (line  6)
* Regexps:                               Using regular expressions.
                                                               (line  6)
* Regexps and unprintable characters:    Working with unprintable characters.
                                                               (line  6)
* Regexps for recognizing compiler errors: Compiler error messages.
                                                               (line  6)
* Region, highlighting a:                Highlighting a region.
                                                               (line  6)
* Regular expressions:                   Using regular expressions.
                                                               (line  6)
* Remaining in the same column, regardless of contents: Forcing the cursor to remain in the same column.
                                                               (line  6)
* Removing flashing Gnus messages:       Removing flashing messages.
                                                               (line  6)
* Removing yourself from GNU mailing lists: Unsubscribing from Emacs lists.
                                                               (line  6)
* Repeating commands many times:         Repeating commands.   (line  6)
* Replacing highlighted text:            Replacing highlighted text.
                                                               (line  6)
* Replacing newlines:                    Searching for/replacing newlines.
                                                               (line  6)
* Replacing strings across files:        Replacing text across multiple files.
                                                               (line  6)
* Replacing, and case sensitivity:       Controlling case sensitivity.
                                                               (line 12)
* Replies to mail/news, inserting a prefix character: Inserting text at the beginning of each line.
                                                               (line  6)
* Replying only to the sender of a message: Replying to the sender of a message.
                                                               (line  6)
* Reporting bugs:                        Reporting bugs.       (line  6)
* Resources, X:                          Valid X resources.    (line  6)
* Retrieving and installing Emacs:       Installing Emacs.     (line  6)
* Retrieving the latest FAQ version:     Obtaining the FAQ.    (line  6)
* Richard Stallman, acronym for:         Common acronyms.      (line  6)
* Right-to-left alphabets:               Right-to-left alphabets.
                                                               (line  6)
* Rmail and /usr/spool/mail:             Rmail writes to /usr/spool/mail.
                                                               (line  6)
* Rmail munged my files:                 Recovering mail files when Rmail munges them.
                                                               (line  6)
* Rmail thinks all messages are one large message: Rmail thinks all messages are one big one.
                                                               (line  6)
* Rmail, replying to the sender of a message in: Replying to the sender of a message.
                                                               (line  6)
* Rmail, sorting messages in:            Sorting the messages in an Rmail folder.
                                                               (line  6)
* RMS, definition of:                    Common acronyms.      (line  6)
* Rolodex-like functionality:            BBDB.                 (line  6)
* Saving a copy of outgoing mail:        Saving a copy of outgoing mail.
                                                               (line  6)
* Saving at frequent intervals:          Disabling auto-save-mode.
                                                               (line  6)
* Saving multi-part postings in Gnus:    Saving a multi-part Gnus posting.
                                                               (line  6)
* Scrolling horizontally:                Horizontal scrolling. (line  6)
* Scrolling only one line:               Scrolling only one line.
                                                               (line  6)
* Searching for newlines:                Searching for/replacing newlines.
                                                               (line  6)
* Searching for unprintable characters:  Working with unprintable characters.
                                                               (line  6)
* Searching without case sensitivity:    Controlling case sensitivity.
                                                               (line  6)
* Security with Emacs:                   Security risks with Emacs.
                                                               (line  6)
* Selectively displaying #ifdef code:    Hiding #ifdef lines.  (line  6)
* Self-paced tutorial, invoking the:     Basic editing.        (line  6)
* Semitic alphabets:                     Right-to-left alphabets.
                                                               (line  6)
* Sender, replying only to:              Replying to the sender of a message.
                                                               (line  6)
* Sending mail with aliases:             Expanding aliases when sending mail.
                                                               (line  6)
* SERVICE, description of file:          Informational files for Emacs.
                                                               (line  6)
* Set number capability in vi emulators: Displaying the current line or column.
                                                               (line 34)
* Setting the included text character:   Changing the included text prefix.
                                                               (line  6)
* Setting X resources:                   Valid X resources.    (line  6)
* sh-mode:                               Modes for various languages.
                                                               (line  6)
* Shell buffer, echoed commands and ^M in: ^M in the shell buffer.
                                                               (line  6)
* Shell mode:                            Modes for various languages.
                                                               (line  6)
* Shell Mode, and MS-Windows:            Problems with Shell Mode on MS-Windows.
                                                               (line  6)
* shell-mode and current directory:      Shell mode loses the current directory.
                                                               (line  6)
* shell-mode exits:                      Shell process exits abnormally.
                                                               (line  6)
* Show matching paren as in vi:          Matching parentheses. (line 26)
* Single space following periods:        Filling paragraphs with a single space.
                                                               (line  6)
* Slow catch up in Gnus:                 Catch-up is slow in Gnus.
                                                               (line  6)
* Slow connections causing flashing messages in Gnus: Removing flashing messages.
                                                               (line  6)
* Snail mail address of the FSF:         Contacting the FSF.   (line  6)
* Snail mail, ordering Emacs via:        Finding Emacs on the Internet.
                                                               (line  6)
* Software patents, opposition to:       The LPF.              (line  6)
* Sorting messages in an Rmail folder:   Sorting the messages in an Rmail folder.
                                                               (line  6)
* Source code, building Emacs from:      Installing Emacs.     (line  6)
* Sources for current GNU distributions: Current GNU distributions.
                                                               (line  6)
* SPC file name completion:              SPC no longer completes file names.
                                                               (line  6)
* Spell-checker:                         Ispell.               (line  6)
* Spelling, checking TeX documents:      Checking TeX and *roff documents.
                                                               (line  6)
* Spelling, checking text documents:     Spell-checkers.       (line  6)
* Spontaneous entry into isearch-mode:   Spontaneous entry into isearch-mode.
                                                               (line  6)
* Stallman, Richard, acronym for:        Common acronyms.      (line  6)
* Starting Gnus faster:                  Starting Gnus faster. (line  6)
* Starting mail/news reader automatically: Automatically starting a mail or news reader.
                                                               (line  6)
* Status of Emacs:                       Status of Emacs.      (line  6)
* stty and Emacs:                        stty and Backspace key.
                                                               (line  6)
* Stuff, current GNU:                    Current GNU distributions.
                                                               (line  6)
* SUN-SUPPORT, description of file:      Informational files for Emacs.
                                                               (line  6)
* Supercite:                             Supercite.            (line  6)
* Superyank:                             Supercite.            (line  6)
* Supported systems:                     New in Emacs 22.      (line  9)
* Suspending Emacs:                      Forcing Emacs to iconify itself.
                                                               (line  6)
* Swapping keys:                         Swapping keys.        (line  6)
* switch, indenting:                     Indenting switch statements.
                                                               (line  6)
* Symbols generated by function keys:    Working with function and arrow keys.
                                                               (line  6)
* Syntax highlighting:                   Turning on syntax highlighting.
                                                               (line  6)
* Syntax highlighting on a TTY:          Colors on a TTY.      (line  6)
* Synthetic X events and security:       Security risks with Emacs.
                                                               (line  6)
* Tab length:                            Changing the length of a Tab.
                                                               (line  6)
* TECO:                                  Origin of the term Emacs.
                                                               (line  6)
* Termcap:                               Termcap/Terminfo entries for Emacs.
                                                               (line  6)
* Terminal setup code in .emacs:         Terminal setup code works after Emacs has begun.
                                                               (line  6)
* Terminfo:                              Termcap/Terminfo entries for Emacs.
                                                               (line  6)
* TeX documents, checking spelling in:   Checking TeX and *roff documents.
                                                               (line  6)
* TeX mode:                              AUCTeX.               (line  6)
* Texinfo documentation, installing:     Installing Texinfo documentation.
                                                               (line  6)
* Texinfo file, printing:                Printing a Texinfo file.
                                                               (line  6)
* Text indentation:                      Automatic indentation.
                                                               (line  6)
* Text strings, putting regexps in:      Using regular expressions.
                                                               (line  6)
* Text, highlighting:                    Highlighting a region.
                                                               (line  6)
* Titlebar, displaying the current file name in: Displaying the current file name in the titlebar.
                                                               (line  6)
* Toggling overwrite-mode:               Overwrite mode.       (line  6)
* Toolbar support:                       New in Emacs 21.      (line  6)
* Tools needed to compile Emacs under DOS: Emacs for MS-DOS.   (line  6)
* TOS, Emacs for:                        Emacs for Atari ST.   (line  6)
* transient-mark-mode:                   Highlighting a region.
                                                               (line  6)
* Translations for keys under X:         X key translations for Emacs.
                                                               (line  6)
* TTY colors:                            New in Emacs 21.      (line 14)
* Tutorial, invoking the:                Basic editing.        (line  6)
* Unbundled packages:                    Packages that do not come with Emacs.
                                                               (line  6)
* underline-region:                      Underlining paragraphs.
                                                               (line  6)
* Underlining a region of text:          Underlining paragraphs.
                                                               (line  6)
* Underlining, embedded in news articles: Viewing articles with embedded underlining.
                                                               (line  6)
* Unix regexps, differences from Emacs:  Using regular expressions.
                                                               (line  6)
* Unix systems, installing Emacs on:     Installing Emacs.     (line  6)
* Unpacking and installing Emacs:        Installing Emacs.     (line  6)
* Unprintable characters, working with:  Working with unprintable characters.
                                                               (line  6)
* unrmail command:                       Recovering mail files when Rmail munges them.
                                                               (line 13)
* Unsubscribing from GNU mailing lists:  Unsubscribing from Emacs lists.
                                                               (line  6)
* Up-to-date GNU stuff:                  Current GNU distributions.
                                                               (line  6)
* Updating Emacs:                        Updating Emacs.       (line  6)
* Updating files with diffs:             Patch.                (line  6)
* Usenet archives for GNU groups:        Newsgroup archives.   (line  6)
* Usenet groups, appropriate messages for: Guidelines for newsgroup postings.
                                                               (line  6)
* Usenet reader in Emacs:                Reading news with Emacs.
                                                               (line  6)
* Using an existing Emacs process:       Using an already running Emacs process.
                                                               (line  6)
* Variable documentation:                Emacs Lisp documentation.
                                                               (line  6)
* Variable-size fonts:                   New in Emacs 21.      (line  6)
* Version, latest:                       Latest version of Emacs.
                                                               (line  6)
* Vertical movement in empty documents:  Forcing the cursor to remain in the same column.
                                                               (line  6)
* Very large files, opening:             Problems with very large files.
                                                               (line  6)
* vi emulation:                          VIPER.                (line  6)
* View Mail:                             VM.                   (line  6)
* Viewing Info files:                    Viewing Info files outside of Emacs.
                                                               (line  6)
* VIPER:                                 VIPER.                (line  6)
* Visible bell:                          Turning off beeping.  (line  6)
* Visiting files takes a long time:      Emacs takes a long time to visit files.
                                                               (line  6)
* VM:                                    VM.                   (line  6)
* VMS, Emacs for:                        Emacs for VMS and DECwindows.
                                                               (line  6)
* Volume of bell:                        Turning the volume down.
                                                               (line  6)
* w3-mode:                               Emacs/W3.             (line  6)
* w32-bdf-filename-alist:                How to add fonts.     (line 55)
* w32-find-bdf-fonts:                    How to add fonts.     (line 55)
* Web browser:                           Emacs/W3.             (line  6)
* Web, reading the FAQ on the:           Obtaining the FAQ.    (line  6)
* Why Emacs?:                            Origin of the term Emacs.
                                                               (line 22)
* Windows 9X, ME, NT, 2K, and CE, Emacs for: Emacs for Windows.
                                                               (line  6)
* Windows files, editing:                Editing MS-DOS files. (line  6)
* Working with arrow keys:               Working with function and arrow keys.
                                                               (line  6)
* Working with function keys:            Working with function and arrow keys.
                                                               (line  6)
* Working with unprintable characters:   Working with unprintable characters.
                                                               (line  6)
* Wrapping lines:                        Wrapping words automatically.
                                                               (line  6)
* Wrapping word automatically:           Wrapping words automatically.
                                                               (line  6)
* Writing and debugging TeX:             AUCTeX.               (line  6)
* WWW browser:                           Emacs/W3.             (line  6)
* X events and security:                 Security risks with Emacs.
                                                               (line  6)
* X key translations:                    X key translations for Emacs.
                                                               (line  6)
* X Menus don't work:                    Linking with -lX11 fails.
                                                               (line 28)
* X resources:                           Valid X resources.    (line  6)
* X resources being ignored:             Emacs ignores X resources.
                                                               (line  6)
* X Window System and function keys:     Using function keys under X.
                                                               (line  6)
* X Window System and iconification:     Forcing Emacs to iconify itself.
                                                               (line  6)
* XEmacs:                                Difference between Emacs and XEmacs.
                                                               (line  6)
* Xterm and <Meta> key:                  Meta key does not work in xterm.
                                                               (line  6)
* Yacc mode:                             Modes for various languages.
                                                               (line  6)
* Yanking text into the search string:   Yanking text in isearch.
                                                               (line  6)



Tag Table:
Node: Top1370
Node: FAQ notation1973
Node: Basic keys2432
Ref: Basic keys-Footnote-14401
Node: Extended commands4483
Node: On-line manual5562
Node: File-name conventions6456
Node: Common acronyms8016
Node: General questions9136
Node: The LPF9581
Node: Real meaning of copyleft10199
Node: Guidelines for newsgroup postings11343
Node: Newsgroup archives13051
Node: Reporting bugs14007
Node: Unsubscribing from Emacs lists16119
Node: Contacting the FSF16957
Node: Getting help17516
Node: Basic editing17999
Node: Learning how to do something19104
Node: Getting a printed manual21706
Node: Emacs Lisp documentation22743
Node: Installing Texinfo documentation23489
Node: Printing a Texinfo file27057
Node: Viewing Info files outside of Emacs28392
Node: Informational files for Emacs29279
Node: Help installing Emacs30772
Node: Obtaining the FAQ31464
Node: Status of Emacs34083
Node: Origin of the term Emacs34432
Node: Latest version of Emacs35683
Node: New in Emacs 2035946
Node: New in Emacs 2137143
Node: New in Emacs 2237977
Node: Common requests41074
Node: Setting up a customization file42868
Node: Using Customize44126
Node: Colors on a TTY44903
Node: Debugging a customization file45843
Node: Displaying the current line or column46750
Node: Displaying the current file name in the titlebar48482
Node: Turning on abbrevs by default49646
Node: Associating modes with files50295
Node: Highlighting a region51329
Node: Replacing highlighted text51705
Node: Controlling case sensitivity52494
Node: Working with unprintable characters53410
Node: Searching for/replacing newlines55079
Node: Yanking text in isearch55482
Node: Wrapping words automatically55820
Node: Turning on auto-fill by default56290
Node: Spell-checkers56983
Node: Checking TeX and *roff documents57270
Node: Changing load-path57574
Node: Using an already running Emacs process58067
Node: Compiler error messages60474
Node: Indenting switch statements60826
Node: Customizing C and C++ indentation61745
Node: Horizontal scrolling64340
Node: Overwrite mode65639
Node: Turning off beeping66127
Node: Turning the volume down66693
Node: Automatic indentation67388
Node: Matching parentheses69214
Node: Hiding #ifdef lines70848
Node: Repeating commands71323
Node: Valid X resources72469
Node: Evaluating Emacs Lisp code72957
Node: Changing the length of a Tab74421
Node: Inserting text at the beginning of each line75126
Node: Underlining paragraphs76150
Node: Forcing the cursor to remain in the same column76574
Node: Forcing Emacs to iconify itself77174
Node: Using regular expressions77549
Node: Replacing text across multiple files78543
Node: Documentation for etags79700
Node: Disabling backups80094
Node: Disabling auto-save-mode81563
Node: Going to a line by number82455
Node: Modifying pull-down menus83914
Node: Deleting menus and menu options87044
Node: Turning on syntax highlighting87758
Node: Scrolling only one line90759
Node: Editing MS-DOS files91448
Node: Filling paragraphs with a single space92558
Node: Escape sequences in shell output92970
Node: Fullscreen mode on MS-Windows93862
Node: Bugs and problems94688
Node: Problems with very large files95890
Node: ^M in the shell buffer96488
Node: Shell process exits abnormally98285
Node: Problems with Shell Mode on MS-Windows99634
Node: Termcap/Terminfo entries for Emacs100662
Node: Spontaneous entry into isearch-mode101899
Node: Problems talking to certain hosts102554
Node: Errors with init files104165
Node: Emacs ignores X resources104979
Node: Emacs ignores frame parameters106785
Node: Emacs takes a long time to visit files107636
Node: Editing files with $ in the name108387
Node: Shell mode loses the current directory108836
Node: Security risks with Emacs109768
Node: Dired claims that no file is on this line113617
Node: Compiling and installing Emacs114702
Node: Installing Emacs115008
Node: Updating Emacs118863
Node: Problems building Emacs119506
Node: Linking with -lX11 fails120398
Node: Finding Emacs and related packages121669
Node: Finding Emacs on the Internet122321
Node: Finding a package with particular functionality123028
Node: Packages that do not come with Emacs124198
Node: Current GNU distributions125568
Node: Difference between Emacs and XEmacs126107
Node: Emacs for MS-DOS127789
Node: Emacs for Windows130725
Node: Emacs for OS/2131574
Node: Emacs for Atari ST132162
Node: Emacs for the Amiga132537
Node: Emacs for NeXTSTEP133049
Node: Emacs for Apple computers133492
Node: Emacs for VMS and DECwindows134001
Node: Modes for various languages134400
Node: Major packages and programs135072
Node: VM135391
Node: Supercite136140
Node: Calc136696
Node: VIPER137478
Node: AUCTeX138232
Node: BBDB139322
Node: Ispell139895
Node: Emacs/W3140428
Node: EDB141062
Node: Mailcrypt141436
Node: JDE142204
Node: Patch142667
Node: Key bindings143006
Node: Binding keys to commands143785
Node: Invalid prefix characters145911
Node: Terminal setup code works after Emacs has begun146755
Node: Using function keys under X148128
Node: Working with function and arrow keys148497
Node: X key translations for Emacs149022
Node: Handling C-s and C-q with flow control149834
Node: Binding C-s and C-q154910
Node: Backspace invokes help155847
Node: stty and Backspace key159638
Node: Swapping keys159936
Node: Producing C-XXX with the keyboard161191
Node: No Meta key161812
Node: No Escape key162349
Node: Compose Character162910
Node: Binding combinations of modifiers and function keys163403
Node: Meta key does not work in xterm164637
Node: ExtendChar key does not work as Meta166810
Node: SPC no longer completes file names167720
Node: Alternate character sets168441
Node: Emacs does not display 8-bit characters168769
Node: Inputting eight-bit characters169583
Node: Kanji and Chinese characters170046
Node: Right-to-left alphabets170592
Node: How to add fonts171545
Node: Mail and news176009
Node: Changing the included text prefix176931
Node: Saving a copy of outgoing mail177593
Node: Expanding aliases when sending mail178625
Node: Rmail thinks all messages are one big one180032
Node: Sorting the messages in an Rmail folder180715
Node: Rmail writes to /usr/spool/mail181083
Node: Recovering mail files when Rmail munges them181883
Node: Replying to the sender of a message182940
Node: MIME with Emacs mail packages184022
Node: Automatically starting a mail or news reader184538
Node: Reading news with Emacs185268
Node: Gnus does not work with NNTP185584
Node: Viewing articles with embedded underlining186493
Node: Saving a multi-part Gnus posting188515
Node: Starting Gnus faster188905
Node: Catching up in all newsgroups189678
Node: Killing based on nonstandard headers190100
Node: Removing flashing messages190875
Node: Catch-up is slow in Gnus191204
Node: Gnus hangs for a long time191527
Node: Learning more about Gnus192748
Node: Concept index193044

End Tag Table
